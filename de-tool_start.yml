- name: 'A.0.0 Create OS groups'
  hosts: localhost
  become: false
  gather_facts: false
  connection: local
  tasks:
    - name: 'A.0.1 Create OS group'
      group_by:
        key: 'machine_{{ ostype }}'
      changed_when: false
      when: ostype is defined
      delegate_to: localhost

- name: 'A.0.1 Socks tunnel setup'
  hosts: localhost
  gather_facts: false
  tasks:
    - include_role:
        name: ansible-role-event-socks-tunnel
        apply:
          check_mode: false
          run_once: true
          delegate_to: localhost
      vars:
    - set_fact:
        ansible_job_id: '{{ tower_job_id }}'
        ansible_become_method: runas
        ansible_become_user: system
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
# set maintenance mode
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
# -nodename     itm nodename to be set in maintenancemode. ( ex. '-nodename kmdwinitm001' )
# -desc         add description to maintenance mode
# -change       add change number to maintenance. (optional)
# -from_time    maintenance begin. type -from now' or use format <yyyy-MM-dd HH:mm>
# -until_time   maintenance durance. type '-until_time 10' for example 10 minutes or use format '-until_time yyyy-MM-dd HH:mm' for specific endtime
# -monsol       monitor soloution. (win,linux,miis,mssql,db2,ora,exe,msps,wmq, look in bluecare for more) (optional)
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: 'A.1.0 decommission of energinet servers on request from servicenow'
  hosts: localhost
  gather_facts: false
  vars:
    nodename: '{{ req_hostname }}'
    desc: '{{ desc }}'
    change: '{{ req_servicenow_id }}'
    from_time: '{{ from_time }}'
    until_time: '{{ until_time }}'
    monsol: '{{ monsol }}'
    bc_usr: '{{ bc_usr }}'
    bc_pwd: '{{ bc_pwd }}'
    # bc_usr: "{{ lookup('env','BLUECARE_USERNAME') }}"
    # bc_pwd: "{{ lookup('env','BLUECARE_PASSWORD') }}"
  # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
  # set_maintenance_mode
  # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
  tasks:
  - name: 'A.1.2 Run set_maintenance_mode'
    shell: >
      python set_maintenance_mode.py
      -nodename '{{ nodename }}'
      -desc '{{ desc }}'
      -change '{{ change }}'
      -from_time '{{ from_time }}'
      -until_time '{{ until_time }}'
      -monsol '{{ monsol }}'
      -bc_usr '{{ bc_usr }}'
      -bc_pwd '{{ bc_pwd }}'
    args:
      chdir: "scripts/"
    register: script_result_mmode
      # no_log: true

  - name: 'A.1.3 Output result'
    debug:
      var: script_result_mmode.stdout_lines
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
# check_for_databases. we want to know if there are DB on
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: 'A.2.0 Start check for databases'
  hosts: '{{ req_hostname }}'
  become: false
  gather_facts: false
  vars:
    tmpdir: "C:/Temp/decomm_check/"

  tasks:
  # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    # copy scripts to {{ tmpdir }}
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
  - name: "A.2.1 copy scripts to {{ tmpdir }}"
    win_copy:
      src: "scripts/"
      dest: "{{ tmpdir }}"

  - name: 'A.2.2 Run check_for_databases'
    shell: python ./check_for_databases.py
    args:
      chdir: "{{ tmpdir }}"
    register: script_result_DB

  - name: 'A.2.3 Output result'
    debug:
      var: script_result_DB.stdout_lines

  - name: "A.2.4. Fail if check_for_databases did not exited with code 0"
    fail:
      msg: "check_for_databases.py script did not exit with code 0"
    when: script_result_DB.rc != 0