---
# tasks/main.yml for find_cleanup_candidates role
# This role searches for files that might need cleanup based on provided patterns

- name: 'Ensure search path exists'
  stat:
    path: "{{ search_path | default('/') }}"
  register: path_exists

- name: 'Create temporary directory for search results'
  file:
    path: "/tmp/cleanup_search"
    state: directory
    mode: '0755'
  when: path_exists.stat.exists

- name: 'Initialize results file'
  copy:
    content: "# Cleanup candidates found on {{ ansible_hostname }} - {{ ansible_date_time.date }}\n"
    dest: "/tmp/cleanup_candidates_{{ ansible_hostname }}_{{ ansible_date_time.iso8601_basic_short }}.txt"
    force: yes
  register: results_file_init
  when: save_to_file | default(true) and path_exists.stat.exists

- name: 'Set results filename'
  set_fact:
    results_filename: "{{ results_file_init.dest }}"
  when: save_to_file | default(true) and path_exists.stat.exists

- name: 'Build exclude directories string'
  set_fact:
    exclude_dirs_string: "{% for dir in exclude_dirs | default(['/proc','/sys','/dev','/run']) %} -not -path '{{ dir }}/*'{% endfor %}"
  when: path_exists.stat.exists

- name: 'Search for cleanup candidates based on patterns'
  block:
    - name: "Find files matching pattern {{ item.name }}"
      shell: >
        find {{ search_path | default('/') }} -type f {% if item.case_sensitive | default(false) %}-name{% else %}-iname{% endif %} "*{{ item.pattern }}*"
        {{ exclude_dirs_string }}
        2>/dev/null || echo ""
      register: found_files
      changed_when: false
      with_items: "{{ search_patterns }}"
      loop_control:
        label: "{{ item.name }}"

    - name: "Display found files for pattern {{ item.0.name }}"
      debug:
        msg: "Found {{ item.1.stdout_lines | length }} possible cleanup candidates for {{ item.0.name }} pattern"
      with_together:
        - "{{ search_patterns }}"
        - "{{ found_files.results }}"
      loop_control:
        label: "{{ item.0.name }}"

    - name: "Append results to file"
      blockinfile:
        path: "{{ results_filename }}"
        block: |

          ## {{ item.0.name }} (pattern: {{ item.0.pattern }})
          ## Found {{ item.1.stdout_lines | length }} matches

          {% for file in item.1.stdout_lines %}
          {{ file }}
          {% endfor %}
        marker: "# {mark} {{ item.0.name }} RESULTS"
      with_together:
        - "{{ search_patterns }}"
        - "{{ found_files.results }}"
      when: save_to_file | default(true)
      loop_control:
        label: "{{ item.0.name }}"

    - name: "Display path to results file"
      debug:
        msg: "Complete results written to {{ results_filename }}"
      when: save_to_file | default(true)

    - name: "Set fact for results file path"
      set_fact:
        cleanup_candidates_file: "{{ results_filename }}"
      when: save_to_file | default(true)

  when: path_exists.stat.exists
