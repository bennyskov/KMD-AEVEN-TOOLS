---
# tasks file for windows
- name: ITM Agent Uninstallation
  when: not (use_itmrmall_exe_win)
  block:
    - name: ITM Agent Uninstallation - uninstall string
      when: not(itm_uninstall_reg.status is search ('success'))
      block:
        - name: Remove ITM using Registry
          itm_agent_uninstall:
            silent_file_name: "{{ itm_silent_uninstall_file }}"
            silent_log_file_name: "{{ itm_silent_uninstall_log_file }}"
          register: itm_uninstall_reg
          changed_when: "{{ not('failed' in itm_uninstall_reg.status) | ternary(true, false) }}"

        - name: ITM uninstallation success - Registry
          when: itm_uninstall_reg.status is search ('success')
          ansible.builtin.set_fact:
            exec_success: true
            exec_changed: true
            exec_rc: 0
            exec_message: ITM has been uninstalled sussessfully.

        - name: ITM uninstallation failed - Registry
          when: not (itm_uninstall_reg.status is search ('success'))
          ansible.builtin.set_fact:
            exec_success: false
            exec_changed: false
            exec_rc: 202
            exec_message:
              - "Failed to uninstall ITM"
              - "{{ itm_uninstall_reg.task }}"
              - "{{ itm_uninstall_reg.message }}"

      rescue:
        - name: ITM uninstallation failed
          ansible.builtin.set_fact:
            exec_success: false
            exec_changed: false
            exec_rc: 203
            exec_message:
              - "Failed to uninstall ITM - Module error"

- name: ITM Agent Uninstallation - ITMRmvAll.exe
  when: use_itmrmall_exe_win
  block:
    - name: Check ITM
      win_shell: >
        if(Get-WmiObject -Class Win32_Product |
        Where-Object {$_.Name -match 'IBM Tivoli Monitoring'}){'TRUE'}else{'FALSE'}
      register: itm_exist

    - name: ITM exists
      when: itm_exist.stdout is search ('TRUE')
      block:
        - name: Create temporary build directory
          win_tempfile:
            state: directory
            prefix: itmrm
            path: "%windir%/temp"
          register: dir_output

        - name: Get temporary directory name
          ansible.builtin.set_fact:
            tmpdir: "{{ dir_output.path }}"

        - name: Copy ITMRmvAll.exe to temporary directory
          ansible.windows.win_copy:
            src: files/ITMRmvAll.exe
            dest: "{{ tmpdir }}/"

        - name: Run exe to remove ITM
          win_shell: >
            Start-Process -NoNewWindow -FilePath "{{ tmpdir }}/ITMRmvAll.exe"
            -ArgumentList "/batchrmvall /removegskit" -Wait
          register: remove_status

        - name: Pause for 60 seconds
          ansible.builtin.pause:
            seconds: 60

        - name: Check ITM
          win_shell: >
            if(Get-WmiObject -Class Win32_Product |
            Where-Object {$_.Name -match 'IBM Tivoli Monitoring'}){'TRUE'}else{'FALSE'}
          register: itm_exist2

        - name: ITM removed
          when: not (itm_exist2.stdout is search ('TRUE'))
          block:
            - name: ITM removed successfully - ITMRmvAll
              ansible.builtin.set_fact:
                exec_success: true
                exec_changed: true
                exec_rc: 0
                exec_message: ITM has been uninstalled sussessfully.

            - name: ITM removed
              ansible.builtin.debug:
                msg: "ITM successfully removed on {{ ansible_hostname }}"

        - name: Fail and ignore if ITM not removed
          when: itm_exist2.stdout is search ('TRUE')
          block:
            - name: ITM uninstallation failed - ITMRmvAll
              ansible.builtin.set_fact:
                exec_success: false
                exec_changed: false
                exec_rc: 202
                exec_message: Failed to uninstall ITM.

            - name: ITM not removed
              ansible.builtin.debug:
                msg: "ITM not removed on {{ ansible_hostname }}"

    - name: ITM not exists
      when: not(itm_exist.stdout is search ('TRUE'))
      block:
        - name: ITM does not exist
          ansible.builtin.set_fact:
            exec_success: true
            exec_changed: false
            exec_rc: 2
            exec_message: "ITM does not exist on {{ ansible_hostname }}"

        - name: ITM not found
          ansible.builtin.debug:
            msg: "ITM does not exist on {{ ansible_hostname }}"

  rescue:
    - name: ITM uninstallation failed
      ansible.builtin.set_fact:
        exec_success: false
        exec_changed: false
        exec_rc: 202
        exec_message:
          - "Failed Task: {{ ansible_failed_task.name }}"
          - "Error: {% if (ansible_failed_result.stderr is defined) %}
            {{ ansible_failed_result.stderr }}
            {% elif (ansible_failed_result.response is defined) %}
            {{ ansible_failed_result.response }}
            {% elif (ansible_failed_result.msg is defined) %}
            {{ ansible_failed_result.msg }}
            {% elif (ansible_failed_result.stdout is defined) %}
            {{ ansible_failed_result.stdout }}{% else %}
            {{ 'Please refer to the job log for more details' }}{% endif %}"

    - name: ITM removal failed - ITMRmvAll
      ansible.builtin.debug:
        msg:
          - "Failed Task: {{ ansible_failed_task.name }}"
          - "Error: {% if (ansible_failed_result.stderr is defined) %}
            {{ ansible_failed_result.stderr }}
            {% elif (ansible_failed_result.response is defined) %}
            {{ ansible_failed_result.response }}
            {% elif (ansible_failed_result.msg is defined) %}
            {{ ansible_failed_result.msg }}
            {% elif (ansible_failed_result.stdout is defined) %}
            {{ ansible_failed_result.stdout }}{% else %}
            {{ 'Please refer to the job log for more details' }}{% endif %}"
