---
# tasks/main.yml for remove_user_cleanup role
# This role provides a reusable way to remove users and clean up their files

- name: 'Check if user {{ username }} exists'
  getent:
    database: passwd
    key: "{{ username }}"
  register: user_exists
  ignore_errors: true

- name: 'User does not exist - skipping user cleanup for {{ username }}'
  debug:
    msg: "User {{ username }} does not exist, skipping cleanup"
  when: user_exists.failed is defined and user_exists.failed

- block:
  - name: 'Get user home directory'
    shell: "getent passwd {{ username }} | cut -d: -f6"
    register: user_home
    changed_when: false

  - name: 'Find processes running as user'
    shell: "ps -u {{ username }} -o pid,cmd | grep -v PID"
    register: user_processes
    changed_when: false
    ignore_errors: true

  - name: 'Kill user processes if requested'
    shell: "pkill -9 -u {{ username }}"
    when: handle_locked_processes | default(true) and user_processes.stdout | length > 0
    ignore_errors: true
    register: pkill_result

  - name: "List files owned by {{ username }} outside home directory"
    shell: "find / -user {{ username }} -not -path \"{{ user_home.stdout }}*\" -not -path \"/proc/*\" -not -path \"/sys/*\" 2>/dev/null || true"
    register: files_owned
    changed_when: false
    when: check_remaining_files | default(true)

  - name: 'Display files owned by user outside home directory'
    debug:
      msg: "Found files owned by {{ username }} outside home directory: {{ files_owned.stdout_lines }}"
    when: check_remaining_files | default(true) and files_owned.stdout | length > 0

  - name: 'Remove user home directory if it exists'
    file:
      path: "{{ user_home.stdout }}"
      state: absent
    when: remove_home | default(true) and user_home.stdout | length > 0
    register: remove_home_result

  - name: 'Remove user account with userdel'
    user:
      name: "{{ username }}"
      state: absent
      remove: "{{ remove_home | default(true) }}"
      force: "{{ force_removal | default(true) }}"

  - name: 'Check if any files still owned by the user after removal'
    shell: "find / -user {{ username }} -not -path \"/proc/*\" -not -path \"/sys/*\" 2>/dev/null || true"
    register: remaining_files
    changed_when: false
    when: check_remaining_files | default(true)

  - name: 'Display warning if files still owned by user'
    debug:
      msg: "Warning: Some files are still owned by {{ username }} after user removal: {{ remaining_files.stdout_lines }}"
    when: check_remaining_files | default(true) and remaining_files.stdout | length > 0

  - name: 'Report user cleanup success'
    debug:
      msg: "User {{ username }} has been successfully removed"

  when: not user_exists.failed is defined or not user_exists.failed
