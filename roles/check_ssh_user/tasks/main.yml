---
# check_ssh_user/tasks/main.yml
# Role to check if SSH user exists and determine if we can connect
# If the user was removed in a previous run, this role will detect it

- name: "Check if {{ ssh_user }} exists on target system"
  shell: "getent passwd {{ ssh_user }} || echo 'USER_NOT_FOUND'"
  register: user_check
  failed_when: false
  changed_when: false
  ignore_errors: true
  delegate_to: localhost

- name: "Set user existence fact"
  set_fact:
    ssh_user_exists: "{{ 'USER_NOT_FOUND' not in user_check.stdout }}"

- name: "Show user status"
  debug:
    msg: "SSH user {{ ssh_user }} {{ 'exists' if ssh_user_exists else 'does not exist' }} on target system"

- name: "Fail if user does not exist - playbook may have already been run"
  fail:
    msg: "SSH user {{ ssh_user }} does not exist on target system. The cleanup may have already been performed. Stopping playbook execution."
  when: not ssh_user_exists

- name: "Test SSH connection to target"
  wait_for:
    host: "{{ target_host | default(inventory_hostname) }}"
    port: 22
    state: started
    timeout: 5
  register: ssh_availability
  ignore_errors: true
  delegate_to: localhost

- name: "Set SSH availability fact"
  set_fact:
    ssh_available: "{{ ssh_availability is success }}"

- name: "Show SSH availability"
  debug:
    msg: "SSH connection to {{ target_host | default(inventory_hostname) }} is {{ 'available' if ssh_available else 'not available' }}"

- name: "Set connection information"
  set_fact:
    can_connect_with_user: "{{ ssh_user_exists and ssh_available }}"

- name: "Connection status summary"
  debug:
    msg: "Connection to {{ target_host | default(inventory_hostname) }} with user {{ ssh_user }} is {{ 'possible' if can_connect_with_user else 'not possible' }}"
