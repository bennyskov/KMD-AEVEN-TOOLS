---
# tasks/main.yml for cleanup_dir role
# This role provides a reusable way to clean up directories with proper checks

- name: 'Check if directory {{ cleanup_path }} exists'
  stat:
    path: "{{ cleanup_path }}"
  register: dir_exists

- name: 'Directory does not exist - skipping cleanup for {{ cleanup_path }}'
  debug:
    msg: "Directory {{ cleanup_path }} does not exist, skipping cleanup"
  when: not dir_exists.stat.exists

- name: 'test if {{ cleanup_path }} is a mountpoint using shell command'
  ignore_errors: yes
  shell: "findmnt -n {{ cleanup_path }} > /dev/null 2>&1 && echo 'is_mount' || echo 'not_mount'"
  register: file_mountpoint
  when: dir_exists.stat.exists

- name: 'Display mountpoint status'
  debug:
    msg: "Path {{ cleanup_path }} is a mountpoint: {{ 'is_mount' in file_mountpoint.stdout }}"
  when: dir_exists.stat.exists and file_mountpoint.stdout is defined

- name: 'Get size of directory before cleanup'
  shell: "du -sh {{ cleanup_path }} 2>/dev/null || echo '0'"
  register: dir_size_before
  changed_when: false
  when: dir_exists.stat.exists

- name: 'Check for locked files in {{ cleanup_path }}'
  shell: "{{ lsof_command | default('/usr/sbin/lsof') }} +D {{ cleanup_path }} 2>/dev/null || echo ''"
  register: locked_files
  changed_when: false
  when: dir_exists.stat.exists

- name: 'Display locked files if any'
  debug:
    msg: "Found locked files that may prevent full cleanup: {{ locked_files.stdout_lines }}"
  when: dir_exists.stat.exists and locked_files.stdout | length > 0

- name: 'Clean up directory content without removing the directory itself (safer option)'
  block:
    - name: 'List directory content before cleanup'
      shell: "ls -la {{ cleanup_path }}"
      register: dir_content_before
      changed_when: false

    - name: 'Remove directory content recursively (preserving directory)'
      shell: "find {{ cleanup_path }} -mindepth 1 -delete"
      register: cleanup_result
      when: not force_delete | default(false)

  when: dir_exists.stat.exists and not force_delete | default(false)

- name: 'Force delete directory completely'
  block:
    - name: 'Remove entire directory and contents'
      file:
        path: "{{ cleanup_path }}"
        state: absent
      register: force_delete_result

    - name: 'Recreate empty directory with specified permissions'
      file:
        path: "{{ cleanup_path }}"
        state: directory
        mode: "{{ dir_mode | default('0755') }}"
        owner: "{{ dir_owner | default('root') }}"
        group: "{{ dir_group | default('root') }}"

  when: dir_exists.stat.exists and force_delete | default(false)

- name: 'Report cleanup operation result'
  debug:
    msg: "Cleanup operation for {{ cleanup_path }} completed successfully"
  when: dir_exists.stat.exists
