---
# tasks/main.yml for git_operations role
# This role provides functionality to push files back to a Git repository

- name: 'Set temporary directory for Git operations'
  set_fact:
    git_temp_dir: "{{ local_repo_path }}"

- name: 'Ensure Git is installed'
  package:
    name: git
    state: present
  become: true

- name: 'Remove any existing temporary Git directory'
  file:
    path: "{{ git_temp_dir }}"
    state: absent

- name: 'Create temporary directory for Git operations'
  file:
    path: "{{ git_temp_dir }}"
    state: directory
    mode: '0755'

- name: 'Set up Git configuration'
  block:
    - name: 'Set global Git user name'
      shell: "git config --global user.name '{{ git_user_name | default('benny Skov') }}'"
      changed_when: false

    - name: 'Set global Git user email'
      shell: "git config --global user.email '{{ git_user_email | default('benny.skov@kyndryl.com') }}'"
      changed_when: false

- name: 'Clone Git repository based on authentication method'
  block:
    - name: 'Clone repository using HTTPS with token'
      shell: >
        git clone https://{{ git_user }}:{{ git_token }}@{{ git_repo_url | regex_replace('^https?://','') }} {{ git_temp_dir }}
      when: git_credentials_method == 'https_token' and git_token is defined and git_token != ''
      no_log: true

    - name: 'Clone repository using HTTPS with username/password'
      shell: >
        git clone https://{{ git_user }}:{{ git_password }}@{{ git_repo_url | regex_replace('^https?://','') }} {{ git_temp_dir }}
      when: git_credentials_method == 'https_basic' and git_user is defined and git_password is defined
      no_log: true

    - name: 'Clone repository using SSH key'
      shell: >
        GIT_SSH_COMMAND="ssh -i {{ git_ssh_key_path }} -o StrictHostKeyChecking=no" git clone {{ git_repo_url }} {{ git_temp_dir }}
      when: git_credentials_method == 'ssh_key' and git_ssh_key_path is defined

    - name: 'Clone repository without authentication (public repo)'
      shell: >
        git clone {{ git_repo_url }} {{ git_temp_dir }}
      when: git_credentials_method == 'none' or git_credentials_method is not defined

- name: 'Switch to specified branch if provided'
  shell: "cd {{ git_temp_dir }} && git checkout {{ git_branch | default('main') }}"
  register: checkout_result
  failed_when:
    - checkout_result.rc != 0
    - "'did not match any file(s) known to git' not in checkout_result.stderr"
  changed_when: false

- name: 'Create branch if it does not exist'
  shell: "cd {{ git_temp_dir }} && git checkout -b {{ git_branch | default('main') }}"
  when: "'did not match any file(s) known to git' in checkout_result.stderr"
  changed_when: true

- name: 'Create directory for cleanup results if it does not exist'
  file:
    path: "{{ git_temp_dir }}/cleanup_results"
    state: directory
    mode: '0755'

- name: 'Get current timestamp'
  set_fact:
    timestamp: "{{ ansible_date_time.iso8601_basic_short }}"

- name: 'Copy cleanup candidates file to Git repository'
  copy:
    src: "{{ cleanup_candidates_file }}"
    dest: "{{ git_temp_dir }}/cleanup_results/cleanup_candidates_{{ ansible_hostname }}_{{ timestamp }}.txt"
    mode: '0644'
  when: cleanup_candidates_file is defined

- name: 'Add files to Git'
  shell: "cd {{ git_temp_dir }} && git add -A"
  changed_when: false

- name: 'Check if there are changes to commit'
  shell: "cd {{ git_temp_dir }} && git status --porcelain"
  register: git_status
  changed_when: false

- name: 'Commit changes if any'
  shell: >
    cd {{ git_temp_dir }} &&
    git commit -m "Automated: Cleanup candidates from {{ ansible_hostname }} on {{ ansible_date_time.date }}"
  when: git_status.stdout != ""
  register: git_commit
  changed_when: git_commit.rc == 0

- name: 'Push changes to remote repository'
  block:
    - name: 'Push using token authentication'
      shell: >
        cd {{ git_temp_dir }} &&
        git push https://{{ git_user }}:{{ git_token }}@{{ git_repo_url | regex_replace('^https?://','') }} {{ git_branch | default('main') }}
      when: git_credentials_method == 'https_token' and git_token is defined and git_token != ''
      no_log: true

    - name: 'Push using username/password authentication'
      shell: >
        cd {{ git_temp_dir }} &&
        git push https://{{ git_user }}:{{ git_password }}@{{ git_repo_url | regex_replace('^https?://','') }} {{ git_branch | default('main') }}
      when: git_credentials_method == 'https_basic' and git_user is defined and git_password is defined
      no_log: true

    - name: 'Push using SSH key authentication'
      shell: >
        cd {{ git_temp_dir }} &&
        GIT_SSH_COMMAND="ssh -i {{ git_ssh_key_path }} -o StrictHostKeyChecking=no" git push origin {{ git_branch | default('main') }}
      when: git_credentials_method == 'ssh_key' and git_ssh_key_path is defined

    - name: 'Push without specific authentication'
      shell: >
        cd {{ git_temp_dir }} && git push origin {{ git_branch | default('main') }}
      when: git_credentials_method == 'none' or git_credentials_method is not defined
  when: git_status.stdout != "" and git_commit.rc == 0

- name: 'Clean up temporary Git directory'
  file:
    path: "{{ git_temp_dir }}"
    state: absent
  when: git_cleanup | default(true)

- name: 'Report Git operation results'
  debug:
    msg: "{{ 'Changes committed and pushed to Git repository' if git_status.stdout != '' and git_commit is defined and git_commit.rc == 0 else 'No changes to commit' if git_status.stdout == '' else 'Failed to push changes to Git repository' }}"
