---
# Main tasks file for git_operations role

- name: "Ensure git is installed"
  package:
    name: git
    state: present
  when: ansible_system != "Win32NT"
  ignore_errors: true

- name: "Create local directory for Git operations"
  file:
    path: "{{ local_repo_path }}"
    state: directory
    mode: '0755'
  ignore_errors: true

- name: "Set Git configuration for user"
  command: "git config --global user.name '{{ git_user_name }}'"
  ignore_errors: true
  changed_when: false

- name: "Set Git configuration for email"
  command: "git config --global user.email '{{ git_user_email }}'"
  ignore_errors: true
  changed_when: false

- name: "Clone repository"
  block:
    - name: "Clone repository with HTTPS and token"
      git:
        repo: "{{ git_repo_url }}"
        dest: "{{ local_repo_path }}"
        version: "{{ git_branch }}"
        force: yes
        depth: 1
      environment:
        GIT_TERMINAL_PROMPT: "0"
        GIT_ASKPASS: /bin/echo
        GIT_USERNAME: "{{ git_user_name }}"
        GIT_PASSWORD: "{{ git_token }}"
      when: git_credentials_method == 'https_token'
      ignore_errors: true

    - name: "Clone repository with SSH key"
      git:
        repo: "{{ git_repo_url }}"
        dest: "{{ local_repo_path }}"
        version: "{{ git_branch }}"
        key_file: "{{ git_ssh_key_path }}"
        force: yes
        depth: 1
      when: git_credentials_method == 'ssh_key'
      ignore_errors: true

    - name: "Clone repository without authentication"
      git:
        repo: "{{ git_repo_url }}"
        dest: "{{ local_repo_path }}"
        version: "{{ git_branch }}"
        force: yes
        depth: 1
      when: git_credentials_method == 'none'
      ignore_errors: true

  rescue:
    - name: "Report Git clone failure"
      debug:
        msg: "Failed to clone repository: {{ ansible_failed_result | default('Unknown error') }}"
      failed_when: true

- name: "Create results directory in repository if it doesn't exist"
  file:
    path: "{{ local_repo_path }}/{{ item.dest | regex_replace('/[^/]+$','') }}"
    state: directory
    mode: '0755'
  loop: "{{ files_to_commit }}"
  loop_control:
    label: "Creating directory for {{ item.dest }}"
  ignore_errors: true
  when: "item.dest is defined and '/' in item.dest"

- name: "Copy files to commit"
  copy:
    src: "{{ item.source }}"
    dest: "{{ local_repo_path }}/{{ item.dest }}"
    mode: "0644"
    remote_src: yes
  loop: "{{ files_to_commit }}"
  loop_control:
    label: "Copying {{ item.source }} to {{ item.dest }}"
  ignore_errors: true
  register: copy_results
  failed_when: false

- name: "Add timestamp to filenames"
  command: >
    mv {{ local_repo_path }}/{{ item.0.dest }}
    {{ local_repo_path }}/{{ item.0.dest | regex_replace('\.([^\.]+)$', '_' + ansible_date_time.date | regex_replace('-', '') + '_' + ansible_date_time.time | regex_replace(':', '') + '.\1') }}
  with_indexed_items: "{{ files_to_commit }}"
  ignore_errors: true
  when: item.1.rc is defined and item.1.rc == 0
  loop_control:
    index_var: index
  failed_when: false

- name: "Add, commit and push changes"
  block:
    - name: "Git add files"
      command: "git add ."
      args:
        chdir: "{{ local_repo_path }}"
      ignore_errors: true

    - name: "Check if there are changes to commit"
      command: "git status --porcelain"
      args:
        chdir: "{{ local_repo_path }}"
      register: git_status
      ignore_errors: true
      changed_when: false

    - name: "Git commit changes"
      command: "git commit -m '{{ commit_message }} - {{ ansible_date_time.iso8601 }}'"
      args:
        chdir: "{{ local_repo_path }}"
      register: commit_result
      ignore_errors: true
      when: git_status.stdout | trim != ""
      changed_when: commit_result.rc == 0

    - name: "Push changes to repository with HTTPS token"
      command: "git push origin {{ git_branch }}"
      args:
        chdir: "{{ local_repo_path }}"
      environment:
        GIT_TERMINAL_PROMPT: "0"
        GIT_ASKPASS: /bin/echo
        GIT_USERNAME: "{{ git_user_name }}"
        GIT_PASSWORD: "{{ git_token }}"
      when:
        - git_status.stdout | trim != ""
        - commit_result.rc is defined and commit_result.rc == 0
        - git_credentials_method == 'https_token'
      ignore_errors: true

    - name: "Push changes to repository with SSH"
      command: "git push origin {{ git_branch }}"
      args:
        chdir: "{{ local_repo_path }}"
      when:
        - git_status.stdout | trim != ""
        - commit_result.rc is defined and commit_result.rc == 0
        - git_credentials_method == 'ssh_key' or git_credentials_method == 'none'
      ignore_errors: true

    - name: "Report successful push"
      debug:
        msg: "Successfully pushed changes to repository"
      when:
        - git_status.stdout | trim != ""
        - commit_result.rc is defined and commit_result.rc == 0

    - name: "Report no changes to push"
      debug:
        msg: "No changes to commit and push"
      when: git_status.stdout | trim == ""

  rescue:
    - name: "Report Git push failure"
      debug:
        msg: "Failed to push changes: {{ ansible_failed_result | default('Unknown error') }}"

- name: "Cleanup local repository"
  file:
    path: "{{ local_repo_path }}"
    state: absent
  when: cleanup_local_repo | bool
  ignore_errors: true
