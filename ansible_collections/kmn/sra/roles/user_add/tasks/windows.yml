---
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------
# check ACL status. To document ACL status before adding readonly
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: "2.A2.00. check ACL status. To document ACL status before adding readonly"
  win_shell: |
    $folderPath = "C:/"
    $directoryInfo = New-Object System.IO.DirectoryInfo($folderPath)
    $acl = $directoryInfo.GetAccessControl()
    $RC = 0
    $acl.Access | ForEach-Object {
          $IdentityReference = $_.IdentityReference
          $FileSystemRights  = $_.FileSystemRights
          $AccessControlType = $_.AccessControlType
          $InheritanceFlags  = $_.InheritanceFlags
          $PropagationFlags  = $_.PropagationFlags
          write-host ""
          write-host "IdentityReference:`t$IdentityReference"
          write-host "FileSystemRights:`t$FileSystemRights"
          write-host "AccessControlType:`t$AccessControlType"
          write-host "InheritanceFlags:`t$InheritanceFlags"
          write-host "PropagationFlags:`t$PropagationFlags"

          if ( [String]::IsNullOrEmpty($_.IdentityReference) -or ( $_.IdentityReference -eq "none" ) )    { $RC = 12 }
    }
    if ( $RC -gt 0 ) {
        write-host ""
        write-host "a access rule was found! exit $RC"
        exit($RC)
    }
  register: ps_result
  ignore_errors: yes
  args:
    no_profile: true
  when:
    - data.username is match("pimadm_win_ro")
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------
# 'Read only' steps only when user is pimadm_win_ro. we need to test for all, otherwise the group_exists will not be set.
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: "2.A2.1. Get-LocalGroup 'Read only' to verify if group exists, if user {{ data.username }}"
  win_shell: "[bool](Get-LocalGroup -Name 'Read only' -ErrorAction SilentlyContinue).Name"
  ignore_errors: yes
  register: win_group_info
  when:
    - data.username is match("pimadm_win_")

- name: "2.A2.2. set group_exists if localgroup 'Read only' exists"
  set_fact:
    group_exists: "{{ 'True' in win_group_info.stdout }}"
  when:
    - data.username is match("pimadm_win_")

- name: "2.A2.3. Create a new local group 'Read only'"
  ansible.windows.win_group:
    name: "Read only"
    state: present
  when:
    - not group_exists
    - data.username is match("pimadm_win_ro")
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------
# User steps. add user is set for ALL pim accounts. Administrators is only set for 'Read only' _ro accounts
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: "2.A2.4. get-LocalUser -Name {{ data.username }} to verify if user exists"
  win_shell: "[bool](get-LocalUser -Name {{ data.username }} -ErrorAction SilentlyContinue).Name"
  ignore_errors: yes
  register: win_user_info
  when:
    - data.username is match("pimadm_win_")

- name: "2.A2.5. set user_exists if {{ data.username }} found"
  set_fact:
    user_exists: "{{ 'True' in win_user_info.stdout }}"
  when:
    - data.username is match("pimadm_win_")

- name: "2.A2.6. Add user {{ data.username }}"
  ansible.windows.win_user:
    fullname: "{{ data.fullname | default(data.username) }}"
    name: "{{ data.username }}"
    password: "{{ data.password | default(lookup('password', '/dev/null chars=ascii_letters,digits,hexdigits,punctuation')) }}"
    description: "{{ data.description | default('') }} "
    groups: "{{ data.groups | default(omit) }}"
    groups_action: add
    state: present
  when:
    - not user_exists
    - data.username is match("pimadm_win_")

- name: "2.A2.7. Set default Administrators for {{ data.username }} - skipped if pimadm_win_ro"
  ansible.windows.win_user:
    name: "{{ data.username }}"
    groups: "Administrators"
    groups_action: add
    password_never_expires: yes
    user_cannot_change_password: no
  when:
    - not user_exists
    - data.username is match("pimadm_win_")
    - not data.username is match("pimadm_win_ro")

- name: "2.A2.8. Set user defaults - skipped if pimadm_win_ro"
  ansible.windows.win_user:
    name: "{{ data.username }}"
    groups_action: add
    password_never_expires: yes
    user_cannot_change_password: no
  when:
    - not user_exists
    - data.username is match("pimadm_win_ro")

- name: "2.A2.9. set ACL for driveletters"
  win_shell: |
    $driveletters = (Get-WmiObject Win32_Volume -ErrorAction SilentlyContinue | Where-Object { $_.DriveType -eq 3 -and $_.DriveLetter }).Name
    foreach ($driveletter in $driveletters) {
        Write-Host $driveletter
        # Define the driveletter and user
        $user = 'pimadm_win_ro'

        # Get the current ACL
        $directoryInfo = New-Object System.IO.DirectoryInfo($driveletter)
        $acl = $directoryInfo.GetAccessControl()

        # Define the deny rule
        $denyRule = New-Object System.Security.AccessControl.FileSystemAccessRule($user, 'Write, Modify', 'Deny')

        # Check if the rule already exists
        $ruleExists = $false
        foreach ($rule in $acl.Access) {
            $identity = $rule.IdentityReference.Value.Split('\')[-1]  # Extract the username part
            if ($identity -eq $user -and
                ($rule.FileSystemRights -band [System.Security.AccessControl.FileSystemRights]::Write) -and
                ($rule.FileSystemRights -band [System.Security.AccessControl.FileSystemRights]::Modify) -and
                $rule.AccessControlType -eq 'Deny') {
                $ruleExists = $true
                Write-Host "$identity == $user"
                break
            } else {
              Write-Host "$identity NOT EQ $user"
            }
        }

        # Add the rule if it doesn't exist
        if (-not $ruleExists) {
            $denyRule | Format-List
            $acl.AddAccessRule($denyRule)
            $directoryInfo.SetAccessControl($acl)
            Write-Host 'Deny rule has been added.'
        } else {
            Write-Host 'Deny rule already exists.'
        }
    }
  args:
    no_profile: true
  when:
    - not user_exists
    - data.username is match("pimadm_win_ro")

- name: "2.A2.10. Ensure EnableLUA is disabled"
  ansible.windows.win_regedit:
    path: HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\System
    name: EnableLUA
    data: 0
    type: dword
    state: present
  when:
    - not user_exists
    - data.username is match("pimadm_win_")

- name: "2.A2.11. test ACL for errors"
  win_shell: |
    $folderPath = "C:/"
    $directoryInfo = New-Object System.IO.DirectoryInfo($folderPath)
    $acl = $directoryInfo.GetAccessControl()
    $RC = 0
    $acl.Access | ForEach-Object {
          $IdentityReference = $_.IdentityReference
          $FileSystemRights  = $_.FileSystemRights
          $AccessControlType = $_.AccessControlType
          $InheritanceFlags  = $_.InheritanceFlags
          $PropagationFlags  = $_.PropagationFlags
          write-host ""
          write-host "IdentityReference:`t$IdentityReference"
          write-host "FileSystemRights:`t$FileSystemRights"
          write-host "AccessControlType:`t$AccessControlType"
          write-host "InheritanceFlags:`t$InheritanceFlags"
          write-host "PropagationFlags:`t$PropagationFlags"

          if ( [String]::IsNullOrEmpty($_.IdentityReference) -or ( $_.IdentityReference -eq "none" ) ) { $RC = 12 }
    }
    if ( $RC -gt 0 ) {
        write-host ""
        write-host "a access rule was found! exit $RC"
        exit($RC)
    }
  register: ps_result
  ignore_errors: yes
  args:
    no_profile: true
  when:
    - not user_exists
    - data.username is match("pimadm_win_ro")

- name: "2.A2.12. Fail if PowerShell script did not exit with code 0"
  fail:
    msg: "PowerShell script did not exit with code 0"
  when:
    - not user_exists
    - data.username is match("pimadm_win_ro")
    - ps_result.rc != 0
