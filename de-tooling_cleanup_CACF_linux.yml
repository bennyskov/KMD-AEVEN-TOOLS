---
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
# Pre-check: Verify SSH connectivity and user existence before starting the cleanup
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: '1.A - Check SSH user existence'
  hosts: '{{ nodename }}'  # Check against the target host
  gather_facts: false
  become: false
  vars:
    ssh_users_to_check:
      - username: 'kmduxat1'
      - username: 'kmduxat2'
  tasks:
    - name: '1.A.01 - Check if SSH users exist before trying to connect'
      include_role:
        name: check_ssh_user
      vars:
        ssh_user: "{{ item.username }}"
        target_host: "{{ nodename | default(inventory_hostname) }}"
      loop: "{{ ssh_users_to_check }}"
      register: user_check_results

    # Fix for 'dict object has no attribute ansible_facts' error
    - name: '1.A.02 - Initialize empty list for available users'
      set_fact:
        available_users: []

    - name: '1.A.03 - Process each user check result individually'
      set_fact:
        available_users: "{{ available_users + [item.item] }}"
      loop: "{{ user_check_results.results }}"
      when:
        - item.ansible_facts is defined
        - item.ansible_facts.can_connect_with_user is defined
        - item.ansible_facts.can_connect_with_user

    - name: '1.A.04 - Set active SSH user'
      set_fact:
        active_ssh_user: "{{ available_users[0].username | default(ansible_user) }}"
      when: available_users | length > 0

    - name: '1.A.05 - Show active SSH user'
      debug:
        msg: "Will attempt to connect using user: {{ active_ssh_user | default('NO VALID USER AVAILABLE!') }}"

    - name: '1.A.06 - Fail if no SSH user is available'
      fail:
        msg: "No valid SSH user is available. All users may have been removed in a previous run."
      when: available_users | length == 0 and ansible_user is not defined

# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
# Step: Begin and setup tunnel and credentials
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: '2.B - Create OS groups'
  hosts: localhost
  become: false
  gather_facts: false
  connection: local
  vars:
    # Add this variable to control whether to skip user deletion
    skip_user_deletion: "{{ skip_user_deletion | default(false) }}"
  tasks:
    - name: '2.B.01 - Create OS group'
      group_by:
        key: "machine_{{ ostype }}"
      changed_when: false
      when: ostype is defined
      delegate_to: localhost

    - name: '2.B.02 - Display user deletion status'
      debug:
        msg: "User deletion is {{ 'DISABLED' if skip_user_deletion else 'ENABLED' }}"

- name: '3.C - Socks tunnel setup'
  hosts: localhost
  gather_facts: false
  tasks:
    - name: '3.C.01 - Include socks tunnel role'
      include_role:
        name: ansible-role-event-socks-tunnel
        apply:
          check_mode: false
          run_once: true
          delegate_to: localhost
      vars:
        acc_id: "{{ blueid_shortcode }}"
        transaction_id: "{{ tower_job_id }}"
        trans_num: "{{ tower_job_id }}"

    - name: '3.C.02 - Set become method and user'
      set_fact:
        ansible_become_method: runas
        ansible_become_user: system

# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
# Using our new reusable gather_facts_localhost role instead of inline tasks
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: '4.D - Gather facts localhost (using role)'
  hosts: localhost
  gather_facts: true
  vars:
    show_debug_facts: false
  tasks:
    - name: '4.D.01 - Include gather_facts_localhost role'
      include_role:
        name: gather_facts_localhost

# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
# Step: We are now running at remote host
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: '5.E - Cleanup ansible / CACF files on host'
  hosts: '{{ nodename }}'
  gather_facts: false
  become: true
  run_once: true
  ignore_errors: yes
  vars:
    nodename: '{{ nodename }}'
    ansible_ssh_timeout: 60
    ansible_persistent_connect_timeout: 180
    ansible_connection_timeout: 180
    ansible_ssh_args: '-o ServerAliveInterval=30 -o ServerAliveCountMax=10 -o ControlMaster=auto -o ControlPersist=180s'
    # Explicitly set Ansible temporary directory to avoid conflicts
    cleanup_directories:
      - path: '/var/opt/ansible'
        description: 'CACF Directory'
      - path: '/var/opt/ansible_workdir'
        description: 'Ansible Workdir'
      - path: '/etc/ansible'
        description: 'Ansible Configuration'
      - path: '/root/.ansible_async'
        description: 'Ansible Async Directory'
      - path: '/tmp/gts-ansible'
        description: 'GTS Ansible Temp Directory'
      - path: '/etc/opt/bigfix'
        description: 'bigfix Directory'
  tasks:
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    # Step: Cleanup ansible / CACF files on host
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    - name: '5.E.01 - Cleanup ansible directories on host {{ nodename }}'
      include_role:
        name: cleanup_dir
      vars:
        cleanup_path: "{{ item.path }}"
        dir_mode: "0775"
        dir_owner: "root"
        dir_group: "root"
        force_delete: true
        lsof_command: "/usr/sbin/lsof"
      loop: "{{ cleanup_directories }}"
      loop_control:
        label: "{{ item.description }} ({{ item.path }})"

    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    # Step: Find cleanup candidates
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    - name: '5.E.02 - Find cleanup candidates'
      include_role:
        name: find_cleanup_candidates
      vars:
        search_patterns:
          - name: "BigFix"
            pattern: "bigfix"
            case_sensitive: false
          - name: "BESClient"
            pattern: "BESClient"
            case_sensitive: false
          - name: "ITM"
            pattern: "ITM"
            case_sensitive: true
          - name: "Ansible"
            pattern: "ansible"
            case_sensitive: true
          - name: "ILMT"
            pattern: "ILMT"
            case_sensitive: true
        search_path: "/"
        exclude_dirs:
          - "/proc"
          - "/sys"
          - "/dev"
          - "/run"
        output_format: "detailed"
        save_to_file: true
        results_file: "/tmp/cleanup_candidates_{{ ansible_date_time.date }}.txt"

    - name: "5.E.03 - Copy file cleanup_candidates from target host (src) to ansible tower local host (dest)"
      copy:
        src: "/tmp/cleanup_candidates_{{ ansible_date_time.date }}.txt" # on remote host
        dest: "/tmp/cleanup_candidates_{{ ansible_date_time.date }}.txt" # on ansible host
        remote_src: yes

# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
# Step: Push collected to repository
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: '6.F - Push cleanup candidates file back to Git repository'
  hosts: localhost
  gather_facts: false
  tasks:
    - name: "6.F.01 - Show Git push status"
      debug:
        msg: "Preparing to push cleanup candidates to Git repository"

    - name: "6.F.02 - Ensure temp directory exists"
      file:
        path: "{{ local_repo_path }}"
        state: directory
        mode: '0755'

    - name: "6.F.03 - Clone repository if not exists"
      ignore_errors: yes
      git:
        repo: "{{ git_repository_url | default('https://github.kyndryl.net/eu-nordic-kmn/KMD-AEVEN-TOOLS.git') }}"
        dest: "{{ local_repo_path }}"
        version: "{{ git_branch | default('main') }}"
        force: yes
        depth: 1
      environment:
        GIT_TERMINAL_PROMPT: "0"
        GIT_ASKPASS: /bin/echo
        GIT_USERNAME: "{{ git_user | default('') }}"
        GIT_PASSWORD: "{{ git_token | default('') }}"
      register: git_clone_result

    - name: "6.F.04 - Create results directory if it doesn't exist"
      file:
        path: "{{ local_repo_path }}/cleanup_results"
        state: directory
        mode: '0755'
      when: git_clone_result is success

    - name: "6.F.05 - Copy cleanup candidates file to repository"
      copy:
        src: "/tmp/cleanup_candidates_{{ ansible_date_time.date }}.txt"
        dest: "{{ local_repo_path }}/cleanup_results/{{ inventory_hostname }}_cleanup_candidates.txt"
        mode: '0644'
      when: git_clone_result is success
      register: file_copy_result

    - name: "6.F.06 - Configure Git user"
      shell: |
        cd {{ local_repo_path }}
        git config user.name "{{ git_user_name | default('Ansible Tower') }}"
        git config user.email "{{ git_user_email | default('ansible@tower.local') }}"
      when: git_clone_result is success and file_copy_result is changed

    - name: "6.F.07 - Add changes to Git"
      shell: |
        cd {{ local_repo_path }}
        git add cleanup_results/{{ inventory_hostname }}_cleanup_candidates.txt
      when: git_clone_result is success and file_copy_result is changed

    - name: "6.F.08 - Commit changes"
      shell: |
        cd {{ local_repo_path }}
        git commit -m "Added cleanup candidates from {{ inventory_hostname }} - {{ ansible_date_time.date }}"
      when: git_clone_result is success and file_copy_result is changed
      register: git_commit_result
      ignore_errors: yes

    - name: "6.F.09 - Push changes to repository"
      shell: |
        cd {{ local_repo_path }}
        git push
      when: git_clone_result is success and git_commit_result is success and git_commit_result.rc == 0
      register: git_push_result
      ignore_errors: yes

    - name: "6.F.10 - Show Git push result"
      debug:
        msg: "Git push result: {{ 'Success' if git_push_result is success else 'Failed' }}"
      when: git_clone_result is success and git_commit_result is success

# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
# Step: Final display system facts and information to confirm cleanup
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: '7.G - Final system information collection'
  hosts: localhost
  gather_facts: true
  tasks:
    - name: '7.G.01 - Collect and display final system state'
      include_role:
        name: gather_facts_localhost
      vars:
        show_debug_facts: false  # Set to true if you need detailed facts
        collect_mountpoints: true
        save_to_file: true
        output_dir: "cleanup_results/final_state"

# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
# Step: Remove ansible users - POINT OF NO RETURN.
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: '8.H - Define list of users to clean up'
  hosts: localhost
  gather_facts: false
  vars:
    skip_user_deletion: "{{ skip_user_deletion | default(false) }}"
    # Define Ansible users here so they're available in this play
    ansib_user1: 'kmduxat1'
    ansib_user2: 'kmduxat2'
    ansib_user3: 'kmnuxat1'
    ansib_user4: 'kmnuxat2'
    ansib_user5: 'kmwuxat1'
    ansib_user6: 'kmwuxat2'
    ansib_user7: 'ug2uxat1'
    ansib_user8: 'ug2uxat2'
    ansib_user9: 'yl5uxat1'
    ansib_usera: 'yl5uxat2'
  tasks:
    - name: "8.H.01 - Show user deletion status"
      debug:
        msg: "User deletion is {{ 'SKIPPED' if skip_user_deletion else 'PROCEEDING' }}"

    - name: '8.H.02 - Set users to cleanup'
      set_fact:
        users_to_cleanup:
          - username: '{{ ansib_user1 }}'
            description: 'Ansible User 1 ({{ ansib_user1 }})'
          - username: '{{ ansib_user2 }}'
            description: 'Ansible User 2 ({{ ansib_user2 }})'
          - username: '{{ ansib_user3 }}'
            description: 'Ansible User 3 ({{ ansib_user3 }})'
          - username: '{{ ansib_user4 }}'
            description: 'Ansible User 4 ({{ ansib_user4 }})'
          - username: '{{ ansib_user5 }}'
            description: 'Ansible User 5 ({{ ansib_user5 }})'
          - username: '{{ ansib_user6 }}'
            description: 'Ansible User 6 ({{ ansib_user6 }})'
          - username: '{{ ansib_user7 }}'
            description: 'Ansible User 7 ({{ ansib_user7 }})'
          - username: '{{ ansib_user8 }}'
            description: 'Ansible User 8 ({{ ansib_user8 }})'
          - username: '{{ ansib_user9 }}'
            description: 'Ansible User 9 ({{ ansib_user9 }})'
          - username: '{{ ansib_usera }}'
            description: 'Ansible User a ({{ ansib_usera }})'
      when: not skip_user_deletion

- name: '8.H.03 - Cleanup and remove users'
  hosts: '{{ nodename }}'
  become: true
  gather_facts: false
  vars:
    skip_user_deletion: "{{ skip_user_deletion | default(false) }}"
  tasks:
    - name: '8.H.04 - Skip user deletion notification'
      debug:
        msg: "SKIPPING user deletion as requested by skip_user_deletion parameter"
      when: skip_user_deletion

    - name: '8.H.05 - Cleanup and remove users'
      include_role:
        name: remove_user_cleanup
      vars:
        username: "{{ item.username }}"
        remove_home: true
        force_removal: true
        handle_locked_processes: true
        check_remaining_files: true
      loop: "{{ users_to_cleanup | default([]) }}"
      loop_control:
        label: "Removing {{ item.description }}"
      when: not skip_user_deletion
