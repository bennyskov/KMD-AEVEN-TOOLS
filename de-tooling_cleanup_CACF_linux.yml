---
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
#step: begin and setup tunnel and credentials
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: Create OS groups
  hosts: localhost
  become: false
  gather_facts: false
  connection: local
  tasks:
    - name: Create OS group
      group_by:
        key: "machine_{{ ostype }}"
      changed_when: false
      when: ostype is defined
      delegate_to: localhost

- name: Socks tunnel setup
  hosts: localhost
  gather_facts: false
  tasks:
    - include_role:
        name: ansible-role-event-socks-tunnel
        apply:
          check_mode: false
          run_once: true
          delegate_to: localhost
      vars:
        acc_id: "{{ blueid_shortcode }}"
        transaction_id: "{{ tower_job_id }}"
        trans_num: "{{ tower_job_id }}"

    - set_fact:
        ansible_become_method: runas
        ansible_become_user: system
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
#step working on localhost
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: '3.C - gather_facts localhost'
  hosts: localhost
  gather_facts: true
  vars:
  tasks:
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    #step debug facts and list local directories for ansible localhost
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    - name: '3.C.00 - debug facts and list local directories for ansible localhost'
      block:
        - name: '3.C.01 - Debug facts'
          debug:
            msg: |-
              '{{ ansible_facts }}'
          tags:
            - debug_facts

        - name: '3.C.02 - List homedir files'
          shell: 'ls -lrt'
          register: script_homedir

        - name: '3.C.03 - Output list homedir'
          debug:
            var: script_homedir.stdout_lines

        - name: '3.C.04 - List /tmp/'
          shell: 'ls -lrt /tmp/'
          register: script_tmp

        - name: '3.C.05 - Output list tmp'
          debug:
            var: script_tmp.stdout_lines
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
#
#step we are now running from remote host
#
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: '4.D - cleanup ansible / CACF files on host '
  hosts: '{{ nodename }}'
  gather_facts: false
  become: false
  run_once: true
  ignore_errors: yes
  vars:
    nodename: '{{ nodename }}'
    ansib_user1: 'kmduxat1'
    ansib_user2: 'kmduxat2'
    cacfdir: '/var/opt/ansible'
  tasks:
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    #step cleanup ansible / CACF files on host
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    - name: '4.D.00 - cleanup ansible files on host {{ nodename }}'
      block:
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        #
        #step cleanup ansible
        #
        # '/var/opt/ansible/GTS',
        # '/var/opt/ansible/tmp',
        # '/var/opt/ansible/GTS/dataLake'
        #
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: '3.C.07 - test if {{ cacfdir }} is a mountpoint using shell command'
          ignore_errors: yes
          shell: "findmnt -n {{ cacfdir }} > /dev/null 2>&1 && echo 'is_mount' || echo 'not_mount'"
          register: file_mountpoint_CACF
          when: file_stat_CACF.stat.exists

        - name: '3.C.07a - Display mountpoint status'
          debug:
            msg: "Path {{ cacfdir }} is a mountpoint: {{ 'is_mount' in file_mountpoint_CACF.stdout }}"
          when: file_stat_CACF.stat.exists and file_mountpoint_CACF.stdout is defined

        - name: '3.C.08 - Delete {{ cacfdir }}'
          ignore_errors: yes
          file:
            path: '{{ cacfdir }}'
            state: absent
            mode: 0775
            owner: root
            group: root
            force: true
          register: delete_dir_result
          when:
            - file_stat_CACF.stat.exists
            - not ('is_mount' in file_mountpoint_CACF.stdout | default(''))

        - name: '3.C.08a - Check what is locking {{ cacfdir }}/ directory'
          shell: "lsof +D {{ cacfdir }}/"
          register: locking_processes
          ignore_errors: yes
          when:
            - delete_dir_result is defined
            - delete_dir_result.failed
            - file_stat_CACF.stat.exists
            - not ('is_mount' in file_mountpoint_CACF.stdout | default(''))

        - name: '3.C.08b - Display locking processes for {{ cacfdir }}/'
          debug:
            msg: >-
              "No locking processes found for {{ cacfdir }}/" if locking_processes.stdout_lines | length == 0 else locking_processes.stdout_lines
          when:
            - locking_processes is defined

        - name: '3.C.08c - List {{ cacfdir }}/'
          ignore_errors: yes
          shell: 'ls -lrta {{ cacfdir }}/'
          register: list_agentdir_out

        - name: '3.C.08d - send output to ansible'
          ignore_errors: yes
          debug:
            var: list_agentdir_out.stdout_lines
          when: file_stat_CACF.stat.exists



        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        #step remove ansible users ansib_user1
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: '4.D.04 - Check if {{ ansib_user1 }} already exists'
          command: 'id {{ ansib_user1 }}'
          register: unix_user_info

        # - name: '4.D.05 - Delete user {{ ansib_user1 }}'
        #   ignore_errors: true
        #   user:
        #     name: '{{ ansib_user1 }}'
        #     remove: '{{ data.remove_user_dirs | default(true) }}'
        #     state: absent

        # - name: '4.D.06 - Delete sudoers profile for {{ ansib_user1 }}'
        #   file:
        #     path: '/etc/sudoers.d/{{ ansib_user1 }}_sudo'
        #     state: absent
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        #step remove ansible users ansib_user2
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: '4.D.07 - Check if {{ ansib_user2 }} already exists'
          command: 'id {{ ansib_user2 }}'
          register: unix_user_info_2

        # - name: '4.D.08 - Delete user {{ ansib_user2 }}'
        #   user:
        #     name: '{{ ansib_user2 }}'
        #     remove: '{{ data.remove_user_dirs | default(true) }}'
        #     state: absent

        # - name: '4.D.09 - Delete sudoers profile for {{ ansib_user2 }}'
        #   file:
        #     path: '/etc/sudoers.d/{{ ansib_user2 }}_sudo'
        #     state: absent