- name: Create OS groups
  hosts: "{{ hostlist }}"
  become: false
  gather_facts: false
  connection: local
  tasks:
    - name: Create OS group
      group_by:
        key: "machine_{{ ostype }}"
      changed_when: false
      when: ostype is defined
      delegate_to: localhost

- name: Socks tunnel setup
  hosts: 'machine_windows'
  gather_facts: false
  tasks:
    - include_role:
        name: ansible-role-event-socks-tunnel
        apply:
          check_mode: false
          run_once: true
          delegate_to: localhost
      vars:
        acc_id: "{{ blueid_shortcode }}"
        transaction_id: "{{ tower_job_id }}"
        trans_num: "{{ tower_job_id }}"

    - set_fact:
        ansible_become_method: runas
        ansible_become_user: system
        
- name: Get script result on windows nodes
  hosts:  "{{ hostlist }}"
  become: true
  run_once: true
  ignore_errors: yes      
  gather_facts: false
  vars:
      tmpdir: "C:/Windows/Temp/servercheck/"
      cmdexec: "servercheck.ps1"  
      aeven_fstdout: "servercheck_aeven_fstdout.log"
      aeven_foutcsv: "servercheck_aeven_foutcsv.csv"
      aeven_fsrvcsv: "servercheck_aeven_fsrvcsv.csv"
      aeven_fsftcsv: "servercheck_aeven_fsftcsv.csv"
      aeven_foutjsn: "servercheck_aeven_foutjsn.json"
      aeven_foutxml: "servercheck_aeven_foutxml.xml"
  tasks:
    - name: run check_for_persistent_route
      # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
      # run check_for_persistent_route
      # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
      block:
        # - name: Delete directory {{ tmpdir }} 
        #   win_file:
        #     path: "{{ tmpdir }}"
        #     state: absent

        # - name: copy scripts
        #   win_copy: 
        #     src: scripts/
        #     dest: "{{ tmpdir }}"

        # - name: Run powershell
        #   win_shell: "{{ tmpdir }}{{ cmdexec }}"
        #   args:
        #     chdir: "{{ tmpdir }}"
        #   register: running_program
        # - name: "pass file1"
        #   debug:
        #     msg: |-
        #       "aeven_fstdout {{ running_program.stdout }}"
        
        # - name: "Read file2"
        #   run_once: true
        #   win_shell: "Get-Content -LiteralPath {{ tmpdir }}{{ aeven_foutcsv }}"
        #   register: file2
        # - name: "pass file2"
        #   debug:
        #     msg: |-
        #       "aeven_foutcsv {{ file2.stdout }}"

        # - name: "Read file3"
        #   run_once: true
        #   win_shell: "Get-Content -LiteralPath {{ tmpdir }}{{ aeven_fsrvcsv }}"
        #   register: file3
        # - name: "pass file3"
        #   debug:
        #     msg: |-
        #       "aeven_fsrvcsv {{ file3.stdout }}"

        # - name: "Read file4"
        #   run_once: true
        #   win_shell: "Get-Content -LiteralPath {{ tmpdir }}{{ aeven_fsftcsv }}"
        #   register: file4
        # - name: "pass file4"
        #   debug:
        #     msg: |-
        #       "aeven_fsftcsv {{ file4.stdout }}"
        
        # - name: "Read file5"
        #   run_once: true
        #   win_shell: "Get-Content -LiteralPath {{ tmpdir }}{{ aeven_foutjsn }}"
        #   register: file5
        # - name: "pass file5"
        #   debug:
        #     msg: |-
        #       "aeven_foutjsn {{ file5.stdout }}"

        # - name: "Read file6"
        #   run_once: true
        #   win_shell: "Get-Content -LiteralPath {{ tmpdir }}{{ aeven_foutxml }}"
        #   register: file6
        # - name: "pass file6"
        #   debug:
        #     msg: |-
        #       "aeven_foutxml {{ file6.stdout }}"


        - name: "2.A2.10. Get-LocalGroup 'Read Only' to verify if group exists"
          win_shell: "(Get-WmiObject Win32_Volume -ErrorAction SilentlyContinue | Where-Object { $_.DriveType -eq 3 -and $_.DriveLetter }).Name"
          ignore_errors: yes
          register: win_driveletters_info
            
        - name: "2.A2.2. set facts of driveletters"
          set_fact:
            driveletters: "{{ win_driveletters_info.stdout }}"

        - name: Example task
          win_shell: |
            Write-Host "Processing {{ item }}"
            {
              $Path = "{{ item }}"
              $Acl = Get-Acl $Path
              $DenyRule = New-Object System.Security.AccessControl.FileSystemAccessRule("pimadm_win_ro", "Write, Modify", "Deny")
              $ruleExists = $Acl.Access | Where-Object {
                $_.IdentityReference -eq "pimadm_win_ro" -and
                $_.FileSystemRights -eq "Write, Modify" -and
                $_.AccessControlType -eq "Deny"
              }

              if (-not $ruleExists) {
                # $Acl.SetAccessRule($DenyRule)
                # Set-Acl $Path $Acl
                Write-Output "Deny rule has been added."
              } else {
                Write-Output "Deny rule already exists."
              }
            }
          loop: "{{ win_driveletters_info.stdout_lines }}"
          args:
            no_profile: true
      # always:
      #   - name: Delete directory {{ tmpdir }} 
      #     win_file:
      #       path: "{{ tmpdir }}"
      #       state: absent
