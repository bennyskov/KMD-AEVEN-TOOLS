- name: 'A.0.0 Create OS groups'
  hosts: localhost
  become: false
  gather_facts: false
  connection: local
  tasks:
    - name: 'A.0.1 Create OS group'
      group_by:
        key: 'machine_{{ ostype }}'
      changed_when: false
      when: ostype is defined
      delegate_to: localhost

- name: 'A.0.1 Socks tunnel setup'
  hosts: localhost
  gather_facts: false
  tasks:
    - include_role:
        name: ansible-role-event-socks-tunnel
        apply:
          check_mode: false
          run_once: true
          delegate_to: localhost
      vars:
    - set_fact:
        ansible_job_id: '{{ tower_job_id }}'
        ansible_become_method: runas
        ansible_become_user: system

# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
# runn de-tooling perl script
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
# -debugScript            write debug messages
# -removeAnsibleUsers     remove ansible users. "kmduxat2,kmnuxat1,kmnuxat2,kmwuxat1,kmwuxat2,ug2uxat1,ug2uxat2,yl5uxat1,yl5uxat2" #!NOTE this is point of no return. NO ANSIBLE AND NO ITM
#
# shell: perl -w de-tooling_ITM_and_ansible_removal_on_linux.pl -nodename [nodename] -removeAnsibleUsers -debugScript
#
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: 'A.1.0 de-tooling of servers as part of handover to Aeven'
  hosts: '{{ nodename }}'
  gather_facts: false
  vars:
    nodename: '{{ nodename }}'
    removeAnsibleUsers: '{{ removeAnsibleUsers }}'
    debugScript: '{{ debugScript }}'
    workdir: '/tmp/KMD-AEVEN-TOOLS/scripts/'
  # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
  #
  # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
  tasks:
    - name: 'A.1.01 - start block'
      block:
      - name: 'A.1.02 - Create scripttemp_dir directory'
        ignore_errors: yes
        file:
          path: '{{ workdir }}'
          state: directory
          mode: 0775
        when: file_stat_ITM.stat.exists

      - name: 'A.1.03 - copy multiple items'
        ignore_errors: yes
        copy:
          src: '{{ item.src }}'
          dest: '{{ item.dest }}'
          mode: 0775

        loop:
          - src: scripts/de-tooling_ITM_and_ansible_removal_on_linux.pl
            dest: '{{ workdir }}de-tooling_ITM_and_ansible_removal_on_linux.pl'
        when: file_stat_ITM.stat.exists

    - name: 'A.1.04 Run de-tooling script'
      shell: >
        perl -w {{ workdir }}de-tooling_ITM_and_ansible_removal_on_linux.pl
        -nodename {{ nodename }}
        {{ removeAnsibleUsers }}
        {{ debugScript }}
      args:
        chdir: '{{ workdir }}'
      register: script_stdout

    - name: 'A.1.05 pass stdout'
      ignore_errors: true
      debug:
        msg: 'de-tool_stddout ==>|{{ script_stdout.stdout }}'
      when: script_stdout.stat.exists

    - name: 'A.1.06 - stat uninstall_log'
      ignore_errors: true
      stat:
        path: '{{ workdir }}de-tooling_removal_linux.log'
      args:
        chdir: '{{ workdir }}'
      register: stat_uninstall_log

    - name: 'A.1.07 - Read content'
      shell: 'cat {{ workdir }}de-tooling_removal_linux.log'
      args:
        chdir: '{{ workdir }}'
      register: cat_uninstall_log
      when: stat_uninstall_log.stat.exists

    - name: 'A.1.08 pass uninstall_log'
      ignore_errors: true
      debug:
        msg: 'de-tool_uninstall_log ==>|{{ cat_uninstall_log.stdout }}'
      when: cat_uninstall_log.stat.exists