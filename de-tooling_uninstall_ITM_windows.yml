- name: Create OS groups
  hosts: localhost
  become: false
  gather_facts: false
  connection: local
  tasks:
    - name: Create OS group
      group_by:
        key: "machine_{{ ostype }}"
      changed_when: false
      when: ostype is defined
      delegate_to: localhost

- name: Socks tunnel setup
  hosts: localhost
  gather_facts: false
  tasks:
    - include_role:
        name: ansible-role-event-socks-tunnel
        apply:
          check_mode: false
          run_once: true
          delegate_to: localhost

    - set_fact:
        ansible_become_method: runas
        ansible_become_user: system
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
# working on LOCALHOST
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: gather_facts LOCALHOST
  hosts: localhost
  gather_facts: true
  tasks:
    - name: Debug facts
      debug:
        msg: |-
          "{{ ansible_facts }}"
      tags:
        - debug_facts

    - name: "List homedir files"
      shell: "ls -lrt"
      register: script_homedir
    - name: Output list homedir
      debug:
        var: script_homedir.stdout_lines

    - name: "List /tmp/"
      shell: "ls -lrt /tmp/"
      register: script_tmp
    - name: Output list tmp
      debug:
        var: script_tmp.stdout_lines

# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
# now working on {{ nodename }} host
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
#
# Install or UNinstallation playbook of a ITM agent on Windows server
#
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: "# Install or UNinstallation playbook of a ITM agent on Windows server {{ nodename }}"
  hosts: "{{ nodename }}"
  become: true
  gather_facts: true
  vars:
    PortablePythonZip: "PortablePython.zip"
    PortablePythonDir: "PortablePython"
    itmZip: "ITM_win_6307SP14-349-1KMD.zip"
    RepoUrl: "http://84.255.93.70:8080/repository/ITM/"
    tmpdir: "C:/Windows/Temp/KMD-AEVEN-TOOLS/"
    debugfile: "ITMAgentInstall_UNinstall_windows_debugfile.log"
    pingfile: "ITMAgentInstall_UNinstall_windows_pingfile.log"
    no_proxy: 84.255.93.70
  tasks:
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    # write global vars
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    - name: "print debug vars {{ nodename }}"
      debug:
        msg: |-
          "RepoUrl = {{ RepoUrl }}"
          "PortablePythonZip = {{ PortablePythonZip }}"
          "itmZip = {{ itmZip }}"
          "tmpdir = {{ tmpdir }}"
          "debugfile = {{ debugfile }}"
          "pingfile = {{ pingfile }}"
          "ansible_facts = {{ ansible_facts }}"
      tags:
        - debug_vars

    - name: "Get current machine"
      run_once: true
      raw: $ENV:PATH
      register: path_out
    - name: "Output result"
      debug:
        var: path_out.stdout_lines
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    # Delete & create new KMD-AEVEN-TOOLS directory
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    - name: "Get-Processes on {{ nodename }}"
      run_once: true
      win_shell: Get-Process -Name "*ITM*"
      ignore_errors: yes
      register: script_getprocess

    - name: Output list script_getprocess
      debug:
        var: script_getprocess.stdout_lines

    - name: "Delete tmpdir directory on {{ nodename }}"
      run_once: true
      win_file:
        path: "{{ tmpdir }}"
        state: absent

    - name: "Create tmpdir"
      run_once: true
      win_file:
        path: "{{ tmpdir }}"
        state: directory
        remote_src: no

    - name: "Create tmpdir"
      run_once: true
      win_file:
        path: "{{ tmpdir }}repository/"
        state: directory
        remote_src: no
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    # copy scripts to {{ tmpdir }}
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    - name: "copy scripts to {{ tmpdir }}"
      run_once: true
      win_copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      loop:
        - src: scripts/
          dest: '{{ tmpdir }}scripts/'

        - src: bin/
          dest: '{{ tmpdir }}bin/'

        - src: ITMconfig/
          dest: '{{ tmpdir }}ITMconfig/'

    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    # Download PortablePythonZip from repository to localhost, copy to target host and unzip
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    - name: "Download {{ PortablePythonZip }} from repository to server"
      delegate_to: localhost
      become: false
      get_url:
        url: "{{ RepoUrl }}{{ PortablePythonZip }}"
        dest: /tmp/{{ PortablePythonZip }}
        mode: '0644'
        force: true
      register: download_PortablePythonZip_result

    - name: "Debug installer download"
      debug:
        msg: |-
          "download_PortablePythonZip_result: {{ download_PortablePythonZip_result }}"
      tags:
        - debug_out

    - name: "Copy {{ PortablePythonZip }} to target host"
      run_once: true
      win_copy:
        src: /tmp/{{ PortablePythonZip }}
        dest: "{{ tmpdir }}repository/{{ PortablePythonZip }}"
        remote_src: no

    - name: "Unzip {{ PortablePythonZip }} file"
      run_once: true
      win_unzip:
        src: "{{ tmpdir }}repository/{{ PortablePythonZip }}"
        dest: "{{ tmpdir }}scripts/{{ PortablePythonDir }}"
        delete_archive: yes
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    # Download itmZip from repository to localhost, copy to target host and unzip
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    - name: "Download {{ itmZip }} from repository to localhost"
      delegate_to: localhost
      run_once: true
      become: false
      get_url:
        url: "{{ RepoUrl }}{{ itmZip }}"
        dest: /tmp/{{ itmZip }}
        mode: '0644'
        force: true
      register: download_itmZip_result

    - name: "Debug installer download"
      debug:
        msg: |-
          "download_itmZip_result: {{ download_itmZip_result }}"
      tags:
        - debug_out

    - name: "Copy {{ itmZip }} archive to target host"
      run_once: true
      win_copy:
        src: /tmp/{{ itmZip }}
        dest: "{{ tmpdir }}repository/{{ itmZip }}"
        remote_src: no

    - name: "Unzip {{ itmZip }} file"
      run_once: true
      win_unzip:
        src: "{{ tmpdir }}repository/{{ itmZip }}"
        dest: "{{ tmpdir }}scripts/"
        delete_archive: yes
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    # run python script
    # {{ tmpdir }}PortablePython/Scripts/python.exe {{ tmpdir }}ITMAgentInstall_UNinstall_windows.py
    # ITMAgentInstall_UNinstall_windows.cmd -nodename kmdwinitm001 -ccode kmn -shore nearshore -envir . -f
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    - name: Run ITMAgentInstall_UNinstall_windows
      win_shell: ./ITMAgentInstall_UNinstall_windows.cmd -nodename {{ nodename }} -u -d -f
      args:
        chdir: "{{ tmpdir }}scripts/"
      register: script_run

    - name: Output result
      debug:
        var: script_run.stdout_lines
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    # send debugfiles to ansible stdout
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    - name: "Get-Item Env:PATH at the end"
      run_once: true
      ignore_errors: true
      win_shell: ($env:Path).split(';') | Out-string -Width 300
      register: cmd_output3
    - name: "Display cmd_output3"
      debug:
        var: cmd_output3.stdout_lines

    - name: "List {{ tmpdir }}"
      run_once: true
      ignore_errors: true
      win_shell: Get-ChildItem -Path {{ tmpdir }}
      register: script_tmpdir2
    - name: "Output result at the end"
      debug:
        var: script_tmpdir2.stdout_lines
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    # send debugfiles to ansible stdout
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    - name: "Read content from {{ debugfile }}"
      run_once: true
      ignore_errors: true
      win_shell: Get-Content -LiteralPath "{{ tmpdir }}scripts/{{ debugfile }}"
      register: file_content_debug
    - name: "Display content in debug output"
      debug:
        msg: |-
          "file_content_debug: {{ file_content_debug.stdout }}"

    - name: "Read content from {{ debugfile }}"
      run_once: true
      ignore_errors: true
      win_shell: Get-Content -LiteralPath "{{ tmpdir }}scripts/{{ pingfile }}"
      register: file_content_ping
    - name: "Display content in ping output"
      debug:
        msg: |-
          "file_content_ping: {{ file_content_ping.stdout }}"
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    # cleanup
    # Remove dir {{ tmpdir }}PortablePython from target host. dont work inside script, because python.exe is running and cleanup on localhost (cacf server)
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------

    - name: Remove zip file from localhost
      delegate_to: localhost
      run_once: true
      become: false
      ignore_errors: true
      file:
        path: /tmp/{{ itmZip }}
        state: absent

    - name: "Remove ansible, bigfix, ilmt directories from server"
      ignore_errors: true
      run_once: true
      when: script_run is success
      win_file:
        path: "{{ item }}"
        state: absent
      loop:
        - "C:/ansible_workdir"
        - "C:/ProgramData/BigFix"
        - "C:/ProgramData/ansible"
        - "C:/ProgramData/ilmt"
        - "C:/Program Files/BigFix"
        - "C:/Program Files/ansible"
        - "C:/Program Files/ilmt"
        - "C:/Windows/Temp/KMD-AEVEN-TOOLS"
      register: cleanup_result

    - name: "Display cleanup results"
      ignore_errors: true
      debug:
        msg: "Removed directory: {{ item.path }}"
      loop: "{{ cleanup_result.results }}"

    - name: "List whats left on {{ nodename }}"
      run_once: true
      ignore_errors: yes
      win_shell: Get-ChildItem -Recurse -Path "C:/ansible_workdir"
      register: script_leftovers

    - name: "List whats left of ansible_workdir"
      run_once: true
      ignore_errors: yes
      win_shell: Get-ChildItem -Recurse -Path "C:/ProgramData/BigFix"

    - name: "List whats left of BigFix"
      run_once: true
      ignore_errors: yes
      win_shell: Get-ChildItem -Recurse -Path "C:/ProgramData/BigFix"

    - name: "List whats left of ansible"
      run_once: true
      ignore_errors: yes
      win_shell: Get-ChildItem -Recurse -Path "C:/ProgramData/ansible"

    - name: "List whats left of ilmt"
      run_once: true
      ignore_errors: yes
      win_shell: Get-ChildItem -Recurse -Path "C:/ProgramData/ilmt"


    - name: "List whats left of BigFix"
      run_once: true
      ignore_errors: yes
      win_shell: Get-ChildItem -Recurse -Path "C:/Program Files/BigFix"

    - name: "List whats left of ansible"
      run_once: true
      ignore_errors: yes
      win_shell: Get-ChildItem -Recurse -Path "C:/Program Files/ansible"

    - name: "List whats left of ilmt"
      run_once: true
      ignore_errors: yes
      win_shell: Get-ChildItem -Recurse -Path "C:/Program Files/ilmt"
