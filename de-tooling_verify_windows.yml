---
- name: Create OS groups
  hosts: localhost
  become: false
  gather_facts: false
  connection: local
  tasks:
    - name: Create OS group
      group_by:
        key: "machine_{{ ostype }}"
      changed_when: false
      when: ostype is defined
      delegate_to: localhost

    - name: Test DNS resolution
      shell: |
        if command -v nslookup >/dev/null 2>&1; then
          nslookup kmdwinccp001.adminkmd.local
        elif command -v host >/dev/null 2>&1; then
          host kmdwinccp001.adminkmd.local
        elif command -v dig >/dev/null 2>&1; then
          dig kmdwinccp001.adminkmd.local
        else
          echo "DNS lookup tools not available, attempting ping test"
          ping -c 1 kmdwinccp001.adminkmd.local
        fi
      register: dns_check
      ignore_errors: true
      delegate_to: localhost

- name: CyberArk connectivity check
  hosts: localhost
  gather_facts: false
  vars:
    cyberark_url: "https://kmdwinccp001.adminkmd.local/"
    cyberark_timeout: 10
  tasks:
    - name: Test connectivity to CyberArk server
      uri:
        url: "{{ cyberark_url }}"
        method: GET
        timeout: "{{ cyberark_timeout }}"
        validate_certs: false
        status_code: [200, 401, 403, 404]
      register: cyberark_connectivity
      ignore_errors: true
      delegate_to: localhost

    - name: Display CyberArk connectivity result
      debug:
        msg: |
          CyberArk server connectivity test:
          URL: {{ cyberark_url }}
          Status: {% if cyberark_connectivity.failed %}FAILED{% else %}SUCCESS{% endif %}
          {% if not cyberark_connectivity.failed %}HTTP Status Code: {{ cyberark_connectivity.status }}{% endif %}
          {% if cyberark_connectivity.failed %}Error: {{ cyberark_connectivity.msg | default('Connection failed') }}{% endif %}
      delegate_to: localhost

    - name: Fail if CyberArk server is unreachable
      fail:
        msg: |
          Cannot reach CyberArk server at {{ cyberark_url }}
          This indicates a network connectivity issue. Please check:
          1. Network connectivity to the CyberArk server
          2. DNS resolution for kmdwinccp001.adminkmd.local
          3. Firewall rules allowing HTTPS traffic
          4. Proxy settings if applicable
          Error details: {{ cyberark_connectivity.msg | default('Connection failed') }}
      when: cyberark_connectivity.failed
      delegate_to: localhost

- name: Socks tunnel setup
  hosts: localhost
  gather_facts: false
  tasks:
    - include_role:
        name: ansible-role-event-socks-tunnel
        apply:
          check_mode: false
          delegate_to: localhost

    - set_fact:
        ansible_become_method: runas
        ansible_become_user: system

- name: "Verify if ITM and Ansible has been uninstalled on Windows server {{ nodename }}"
  hosts: "{{ nodename }}"
  become: true
  gather_facts: false
  vars:
    ansible_connection: psrp
    ansible_psrp_protocol: http
    ansible_psrp_auth: negotiate
    ansible_psrp_cert_validation: ignore
    ansible_psrp_operation_timeout: 60
    ansible_psrp_read_timeout: 90
    ansible_psrp_connection_timeout: 30
    ansible_psrp_message_encryption: auto
    ansible_psrp_credssp_auth_mechanism: auto
    ansible_psrp_negotiate_service: HTTP
    ansible_psrp_negotiate_hostname: "{{ inventory_hostname }}"
  tasks:
    - name: "Get-Processes on ITM"
      win_shell: |
        try {
          $processes = Get-Process -Name "*ITM*" -ErrorAction Stop
          Write-Output "ITM processes found: $($processes.Count) running"
          foreach ($proc in $processes) {
            Write-Output "  - $($proc.Name) (PID: $($proc.Id))"
          }
        } catch {
          Write-Output "No ITM processes running"
        }
      ignore_errors: yes
      register: script_getprocess_itm

    - name: "Get-Processes OPSWARE"
      win_shell: |
        try {
          $processes = Get-Process -Name "*OPSWARE*" -ErrorAction Stop
          Write-Output "OPSWARE processes found: $($processes.Count) running"
          foreach ($proc in $processes) {
            Write-Output "  - $($proc.Name) (PID: $($proc.Id))"
          }
        } catch {
          Write-Output "No OPSWARE processes running"
        }
      ignore_errors: yes
      register: script_getprocess_opsware

    - name: "Test if ansible workdir has been cleared"
      win_shell: |
        try {
          if (Test-Path "C:/ansible_workdir") {
            $items = Get-ChildItem -Path "C:/ansible_workdir" -Recurse -ErrorAction Stop
            $fileCount = ($items | Where-Object { -not $_.PSIsContainer }).Count
            $folderCount = ($items | Where-Object { $_.PSIsContainer }).Count
            if ($fileCount -gt 0 -or $folderCount -gt 0) {
              Write-Output "ansible_workdir contains $fileCount files and $folderCount folders"
            } else {
              Write-Output "ansible_workdir is empty"
            }
          } else {
            Write-Output "ansible_workdir does not exist"
          }
        } catch {
          Write-Output "Error checking ansible_workdir: $($_.Exception.Message)"
        }
      ignore_errors: yes
      register: test_ansible_workdir

    - name: "Test if ansible ProgramData has been cleared"
      win_shell: |
        try {
          if (Test-Path "C:/ProgramData/ansible") {
            $items = Get-ChildItem -Path "C:/ProgramData/ansible" -Recurse -ErrorAction Stop
            $fileCount = ($items | Where-Object { -not $_.PSIsContainer }).Count
            $folderCount = ($items | Where-Object { $_.PSIsContainer }).Count
            if ($fileCount -gt 0 -or $folderCount -gt 0) {
              Write-Output "ProgramData/ansible contains $fileCount files and $folderCount folders"
            } else {
              Write-Output "ProgramData/ansible is empty"
            }
          } else {
            Write-Output "ProgramData/ansible does not exist"
          }
        } catch {
          Write-Output "Error checking ProgramData/ansible: $($_.Exception.Message)"
        }
      ignore_errors: yes
      register: test_ansible_programdata

    - name: "Test if BigFix ProgramData has been cleared"
      win_shell: |
        try {
          if (Test-Path "C:/ProgramData/BigFix") {
            $items = Get-ChildItem -Path "C:/ProgramData/BigFix" -Recurse -ErrorAction Stop
            $fileCount = ($items | Where-Object { -not $_.PSIsContainer }).Count
            $folderCount = ($items | Where-Object { $_.PSIsContainer }).Count
            if ($fileCount -gt 0 -or $folderCount -gt 0) {
              Write-Output "ProgramData/BigFix contains $fileCount files and $folderCount folders"
            } else {
              Write-Output "ProgramData/BigFix is empty"
            }
          } else {
            Write-Output "ProgramData/BigFix does not exist"
          }
        } catch {
          Write-Output "Error checking ProgramData/BigFix: $($_.Exception.Message)"
        }
      ignore_errors: yes
      register: test_bigfix_programdata

    - name: "Test if ilmt ProgramData has been cleared"
      win_shell: |
        try {
          if (Test-Path "C:/ProgramData/ilmt") {
            $items = Get-ChildItem -Path "C:/ProgramData/ilmt" -Recurse -ErrorAction Stop
            $fileCount = ($items | Where-Object { -not $_.PSIsContainer }).Count
            $folderCount = ($items | Where-Object { $_.PSIsContainer }).Count
            if ($fileCount -gt 0 -or $folderCount -gt 0) {
              Write-Output "ProgramData/ilmt contains $fileCount files and $folderCount folders"
            } else {
              Write-Output "ProgramData/ilmt is empty"
            }
          } else {
            Write-Output "ProgramData/ilmt does not exist"
          }
        } catch {
          Write-Output "Error checking ProgramData/ilmt: $($_.Exception.Message)"
        }
      ignore_errors: yes
      register: test_ilmt_programdata

    - name: "Test if ansible Program Files has been cleared"
      win_shell: |
        try {
          if (Test-Path "C:/Program Files/ansible") {
            $items = Get-ChildItem -Path "C:/Program Files/ansible" -Recurse -ErrorAction Stop
            $fileCount = ($items | Where-Object { -not $_.PSIsContainer }).Count
            $folderCount = ($items | Where-Object { $_.PSIsContainer }).Count
            if ($fileCount -gt 0 -or $folderCount -gt 0) {
              Write-Output "Program Files/ansible contains $fileCount files and $folderCount folders"
            } else {
              Write-Output "Program Files/ansible is empty"
            }
          } else {
            Write-Output "Program Files/ansible does not exist"
          }
        } catch {
          Write-Output "Error checking Program Files/ansible: $($_.Exception.Message)"
        }
      ignore_errors: yes
      register: test_ansible_programfiles

    - name: "Test if BigFix Program Files has been cleared"
      win_shell: |
        try {
          if (Test-Path "C:/Program Files/BigFix") {
            $items = Get-ChildItem -Path "C:/Program Files/BigFix" -Recurse -ErrorAction Stop
            $fileCount = ($items | Where-Object { -not $_.PSIsContainer }).Count
            $folderCount = ($items | Where-Object { $_.PSIsContainer }).Count
            if ($fileCount -gt 0 -or $folderCount -gt 0) {
              Write-Output "Program Files/BigFix contains $fileCount files and $folderCount folders"
            } else {
              Write-Output "Program Files/BigFix is empty"
            }
          } else {
            Write-Output "Program Files/BigFix does not exist"
          }
        } catch {
          Write-Output "Error checking Program Files/BigFix: $($_.Exception.Message)"
        }
      ignore_errors: yes
      register: test_bigfix_programfiles

    - name: "Test if ilmt Program Files has been cleared"
      win_shell: |
        try {
          if (Test-Path "C:/Program Files/ilmt") {
            $items = Get-ChildItem -Path "C:/Program Files/ilmt" -Recurse -ErrorAction Stop
            $fileCount = ($items | Where-Object { -not $_.PSIsContainer }).Count
            $folderCount = ($items | Where-Object { $_.PSIsContainer }).Count
            if ($fileCount -gt 0 -or $folderCount -gt 0) {
              Write-Output "Program Files/ilmt contains $fileCount files and $folderCount folders"
            } else {
              Write-Output "Program Files/ilmt is empty"
            }
          } else {
            Write-Output "Program Files/ilmt does not exist"
          }
        } catch {
          Write-Output "Error checking Program Files/ilmt: $($_.Exception.Message)"
        }
      ignore_errors: yes
      register: test_ilmt_programfiles

    - name: "Test if ITM has been cleared"
      win_shell: |
        try {
          if (Test-Path "C:/IBM/ITM/bin") {
            $items = Get-ChildItem -Path "C:/IBM/ITM" -Recurse -ErrorAction Stop
            $fileCount = ($items | Where-Object { -not $_.PSIsContainer }).Count
            $folderCount = ($items | Where-Object { $_.PSIsContainer }).Count
            if ($fileCount -gt 0 -or $folderCount -gt 0) {
              Write-Output "IBM/ITM contains $fileCount files and $folderCount folders"
            } else {
              Write-Output "IBM/ITM is empty"
            }
          } else {
            Write-Output "IBM/ITM does not exist"
          }
        } catch {
          Write-Output "Error checking IBM/ITM: $($_.Exception.Message)"
        }
      ignore_errors: yes
      register: test_itm_files

    - name: "Test if SA-Agent OPSWARE has been removed"
      win_shell: |
        try {
          $paths = @(
            "C:/Program Files/HP/Systems Insight Manager",
            "C:/Program Files (x86)/HP/Systems Insight Manager",
            "C:/Program Files/Hewlett-Packard Enterprise/SA",
            "C:/Program Files (x86)/Hewlett-Packard Enterprise/SA",
            "C:/PROGRA~1/opsware",
            "C:/PROGRA~2/opsware",
            "C:/opt/opsware",
            "C:/opsware"
          )

          $found = $false
          foreach ($path in $paths) {
            if (Test-Path $path) {
              $items = Get-ChildItem -Path $path -Recurse -ErrorAction SilentlyContinue
              $fileCount = ($items | Where-Object { -not $_.PSIsContainer }).Count
              $folderCount = ($items | Where-Object { $_.PSIsContainer }).Count
              if ($fileCount -gt 0 -or $folderCount -gt 0) {
                Write-Output "OPSWARE found at $path with $fileCount files and $folderCount folders"
                $found = $true
              }
            }
          }

          if (-not $found) {
            Write-Output "OPSWARE agent not found in standard locations"
          }
        } catch {
          Write-Output "Error checking OPSWARE agent: $($_.Exception.Message)"
        }
      ignore_errors: yes
      register: test_opsware_agent

    - name: "Display verification results summary"
      debug:
        msg: |
          =================================================
          ITM and Ansible Uninstallation Verification Summary
          =================================================
          Target Server: {{ nodename }}

          Process Checks:
          - ITM Processes: {{ script_getprocess_itm.stdout | default('Error checking') }}
          - OPSWARE Processes: {{ script_getprocess_opsware.stdout | default('Error checking') }}

          Directory Checks:
          - Ansible WorkDir: {{ test_ansible_workdir.stdout | default('Error checking') }}
          - Ansible ProgramData: {{ test_ansible_programdata.stdout | default('Error checking') }}
          - Ansible Program Files: {{ test_ansible_programfiles.stdout | default('Error checking') }}
          - BigFix ProgramData: {{ test_bigfix_programdata.stdout | default('Error checking') }}
          - BigFix Program Files: {{ test_bigfix_programfiles.stdout | default('Error checking') }}
          - ILMT ProgramData: {{ test_ilmt_programdata.stdout | default('Error checking') }}
          - ILMT Program Files: {{ test_ilmt_programfiles.stdout | default('Error checking') }}
          - ITM Installation: {{ test_itm_files.stdout | default('Error checking') }}
          - OPSWARE Agent: {{ test_opsware_agent.stdout | default('Error checking') }}
          =================================================