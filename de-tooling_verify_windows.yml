- name: Create OS groups
  hosts: localhost
  become: false
  gather_facts: true
  connection: local
  tasks:
    - name: Create OS group
      group_by:
        key: "machine_{{ ostype }}"
      changed_when: false
      when: ostype is defined
      delegate_to: localhost

- name: Socks tunnel setup
  hosts: localhost
  gather_facts: false
  tasks:
    - include_role:
        name: ansible-role-event-socks-tunnel
        apply:
          check_mode: false
          run_once: true
          delegate_to: localhost

- name: Debug CyberArk credentials
  hosts: all
  gather_facts: false
  vars:
    # Define standard organizational credentials
    standard_credentials:
      kmn:
        tower_creds: ["kmn_cred_tower_and_sfs", "kmn_cred_tower_and_sfs_no_token"]
        description: "KMN Tower and SFS credentials"
      kmw:
        tower_creds: ["kmw_cred_tower_and_sfs", "kmw_cred_tower_and_sfs_no_token"]
        description: "KMW Tower and SFS credentials"
      eng:
        tower_creds: ["eng_cred_ansible_tower", "eng_cred_tower_and_sfs_no_token"]
        description: "Engineering Tower credentials"
  tasks:
    - name: Auto-detect inventory based on hostname
      set_fact:
        detected_org: >-
          {%- if inventory_hostname | lower is match('^kmn.*') or 'kmn' in inventory_hostname | lower -%}
            kmn
          {%- elif inventory_hostname | lower is match('^kmw.*') or 'kmw' in inventory_hostname | lower -%}
            kmw
          {%- elif inventory_hostname | lower is match('^eng.*') or 'eng' in inventory_hostname | lower or 'hem' in inventory_hostname | lower -%}
            eng
          {%- else -%}
            unknown
          {%- endif -%}
        detected_inventory: >-
          {%- if inventory_hostname | lower is match('^kmn.*') or 'kmn' in inventory_hostname | lower -%}
            kmn_inventory
          {%- elif inventory_hostname | lower is match('^kmw.*') or 'kmw' in inventory_hostname | lower -%}
            kmw_inventory
          {%- elif inventory_hostname | lower is match('^eng.*') or 'eng' in inventory_hostname | lower -%}
            eng_inventory
          {%- elif inventory_hostname | lower is match('^hem.*') or 'hem' in inventory_hostname | lower -%}
            eng_HEM
          {%- else -%}
            unknown_inventory
          {%- endif -%}

    - name: Set organization credentials configuration
      set_fact:
        org_config: "{{ standard_credentials[detected_org] | default({}) }}"
      when: detected_org != 'unknown'

    - name: Display detected organization and inventory
      debug:
        msg: |
          Host: {{ inventory_hostname }}
          Detected Organization: {{ detected_org }}
          Detected Inventory: {{ detected_inventory }}
          Standard Tower Credentials: {{ org_config.tower_creds | default([]) }}
          Will lookup host-specific credentials:
          - OS: {{ detected_org }}_cred_{{ inventory_hostname }}_cyberark_*
          - Jumphost: {{ detected_org }}_cred_{{ inventory_hostname }}_sshproxy_*

    - name: Lookup host-specific OS credentials (HOST-SPECIFIC APPROACH)
      set_fact:
        ansible_user: "{{ lookup('cyberark', detected_org + '_cred_' + inventory_hostname + '_cyberark_user') }}"
        ansible_password: "{{ lookup('cyberark', detected_org + '_cred_' + inventory_hostname + '_cyberark_password') }}"
        credential_source: "host_specific_os"
      when: detected_org != 'unknown'
      no_log: true
      ignore_errors: yes

    - name: Lookup host-specific jumphost credentials (HOST-SPECIFIC APPROACH)
      set_fact:
        jumphost_user: "{{ lookup('cyberark', detected_org + '_cred_' + inventory_hostname + '_sshproxy_user') }}"
        jumphost_password: "{{ lookup('cyberark', detected_org + '_cred_' + inventory_hostname + '_sshproxy_password') }}"
        jumphost_credential_source: "host_specific_jumphost"
      when: detected_org != 'unknown'
      no_log: true
      ignore_errors: yes

    - name: Lookup standard tower credentials for organization
      set_fact:
        tower_credentials: {}
      when: detected_org != 'unknown'

    - name: Get tower credentials for organization
      set_fact:
        tower_credentials: "{{ tower_credentials | combine({ item: lookup('cyberark', item, errors='ignore') }) }}"
      loop: "{{ org_config.tower_creds | default([]) }}"
      when: detected_org != 'unknown' and org_config.tower_creds is defined
      no_log: true
      ignore_errors: yes

    - name: Display credential lookup results
      debug:
        msg: |
          Host-specific credential lookup for {{ inventory_hostname }}:
          - Organization: {{ detected_org }}
          - OS Credentials: {{ 'Found' if ansible_user is defined else 'Not Found' }}
          - Jumphost Credentials: {{ 'Found' if jumphost_user is defined else 'Not Found' }}
          - Tower Credentials: {{ org_config.tower_creds | default([]) | join(', ') }}
          - Credential Pattern: {{ detected_org }}_cred_{{ inventory_hostname }}_*

# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: "Verify if ITM and Ansible has been uninstalled on Windows servers"
  hosts: "{{ nodename | default('all') }}"
  become: true
  gather_facts: true
  tasks:
    - name: Verify host has credentials assigned
      debug:
        msg: |
          Host: {{ inventory_hostname }}
          Inventory: {{ detected_inventory | default('not_detected') }}
          OS Credentials: {{ 'assigned' if ansible_user is defined else 'missing' }}
          Jumphost Credentials: {{ 'assigned' if jumphost_user is defined else 'missing' }}
          Credential Source: {{ credential_source | default('none') }}

    - name: Skip if no credentials found
      meta: end_host
      when: ansible_user is not defined or detected_inventory is not defined

    - name: Test connection with assigned credentials
      win_ping:
      ignore_errors: yes
      register: connection_test

    - name: Display connection status
      debug:
        msg: "Connection to {{ inventory_hostname }} ({{ detected_inventory }}): {{ 'SUCCESS' if connection_test is succeeded else 'FAILED' }}"

    - name: Skip if connection failed
      meta: end_host
      when: connection_test is failed

    - name: Verify nodename pattern
      debug:
        msg: "Running against host: {{ inventory_hostname }} using {{ detected_inventory }}"
      when: (nodename is not defined) or
            (inventory_hostname == nodename) or
            (inventory_hostname in nodename.split(',') if ',' in nodename else False) or
            (inventory_hostname is match(nodename) if '^' in nodename else False)

    - name: Skip if not matching nodename pattern
      meta: end_host
      when: nodename is defined and
            inventory_hostname != nodename and
            inventory_hostname not in (nodename.split(',') if ',' in nodename else []) and
            not (inventory_hostname is match(nodename) if '^' in nodename else False)

    - name: Skip if not Windows
      meta: end_host
      when: ansible_facts['os_family'] is not defined or ansible_facts['os_family'] != 'Windows'

    # Primary verification - Directory/File checks (Most Reliable)
    - name: "Verify ITM installation directories cleared"
      win_shell: (Test-Path "C:/IBM/ITM/bin") -and ((Get-ChildItem -Path "C:/IBM/ITM" -Recurse -File | Measure-Object).Count -gt 0)
      ignore_errors: yes
      register: check_itm_files

    - name: "Verify Opsware installation directories cleared"
      win_shell: (Test-Path "C:/Program Files/Opsware/agent/bin") -and ((Get-ChildItem -Path "C:/Program Files/Opsware/agent/bin" -Recurse -File | Measure-Object).Count -gt 0)
      ignore_errors: yes
      register: check_opsware_files

    # Secondary verification - Service checks (Additional context)
    - name: "Check ITM services status"
      win_shell: "[bool](Get-Service KNT*, K06* -ErrorAction SilentlyContinue)"
      ignore_errors: yes
      register: get_service_itm

    - name: "Check Opsware services status"
      win_shell: "[bool](Get-Service opsware* -ErrorAction SilentlyContinue)"
      ignore_errors: yes
      register: get_service_SA

    #  ----------------------------------------------------------------------------------------------------------------
    #  verify if directories exists
    #  ----------------------------------------------------------------------------------------------------------------

    - name: "test if ansible workdir has been cleared"
      ignore_errors: yes
      win_shell: (Test-Path "C:/ansible_workdir") -and ((Get-ChildItem -Path "C:/ansible_workdir" -Recurse -File | Measure-Object).Count -gt 0)
      register: check_ansible_workdir

    - name: "test if ansible ProgramData has been cleared"
      ignore_errors: yes
      win_shell: (Test-Path "C:/ProgramData/ansible") -and ((Get-ChildItem -Path "C:/ProgramData/ansible" -Recurse -File | Measure-Object).Count -gt 0)
      register: check_ansible_programdata

    - name: "test if BigFix ProgramData has been cleared"
      ignore_errors: yes
      win_shell: (Test-Path "C:/ProgramData/BigFix") -and ((Get-ChildItem -Path "C:/ProgramData/BigFix" -Recurse -File | Measure-Object).Count -gt 0)
      register: check_bigfix_programdata

    - name: "test if ilmt ProgramData has been cleared"
      ignore_errors: yes
      win_shell: (Test-Path "C:/ProgramData/ilmt") -and ((Get-ChildItem -Path "C:/ProgramData/ilmt" -Recurse -File | Measure-Object).Count -gt 0)
      register: check_ilmt_programdata

    - name: "test if ansible Program Files has been cleared"
      ignore_errors: yes
      win_shell: (Test-Path "C:/PROGRA~1/ansible") -and ((Get-ChildItem -Path "C:/PROGRA~1/ansible" -Recurse -File | Measure-Object).Count -gt 0)
      register: check_ansible_progfiles

    - name: "test if BigFix Program Files has been cleared"
      ignore_errors: yes
      win_shell: (Test-Path "C:/PROGRA~1/BigFix") -and ((Get-ChildItem -Path "C:/PROGRA~1/BigFix" -Recurse -File | Measure-Object).Count -gt 0)
      register: check_bigfix_progfiles

    - name: "test if ilmt Program Files has been cleared"
      ignore_errors: yes
      win_shell: (Test-Path "C:/PROGRA~1/ilmt") -and ((Get-ChildItem -Path "C:/PROGRA~1/ilmt" -Recurse -File | Measure-Object).Count -gt 0)
      register: check_ilmt_progfiles

    # Comprehensive verification results
    - name: "Display ITM verification results"
      debug:
        msg: |
          ITM Verification for {{ inventory_hostname }}:
          - Files Present: {{ check_itm_files.stdout | default('Unknown') }}
          - Services Running: {{ get_service_itm.stdout | default('Unknown') }}
          - Status: {{ 'NEEDS CLEANUP' if check_itm_files.stdout == 'True' else 'CLEANED' }}

    - name: "Display Opsware verification results"
      debug:
        msg: |
          Opsware Verification for {{ inventory_hostname }}:
          - Files Present: {{ check_opsware_files.stdout | default('Unknown') }}
          - Services Running: {{ get_service_SA.stdout | default('Unknown') }}
          - Status: {{ 'NEEDS CLEANUP' if check_opsware_files.stdout == 'True' else 'CLEANED' }}

    - name: "Display individual directory verification results"
      debug:
        msg: |
          Directory Cleanup Verification for {{ inventory_hostname }}:
          - ansible_workdir: {{ 'EXISTS' if check_ansible_workdir.stdout == 'True' else 'CLEARED' }}
          - ansible_programdata: {{ 'EXISTS' if check_ansible_programdata.stdout == 'True' else 'CLEARED' }}
          - bigfix_programdata: {{ 'EXISTS' if check_bigfix_programdata.stdout == 'True' else 'CLEARED' }}
          - ilmt_programdata: {{ 'EXISTS' if check_ilmt_programdata.stdout == 'True' else 'CLEARED' }}
          - ansible_progfiles: {{ 'EXISTS' if check_ansible_progfiles.stdout == 'True' else 'CLEARED' }}
          - bigfix_progfiles: {{ 'EXISTS' if check_bigfix_progfiles.stdout == 'True' else 'CLEARED' }}
          - ilmt_progfiles: {{ 'EXISTS' if check_ilmt_progfiles.stdout == 'True' else 'CLEARED' }}

    # Final determination based on file presence (most reliable)
    - name: "Set cleanup status"
      set_fact:
        itm_cleanup_needed: "{{ check_itm_files.stdout == 'True' }}"
        opsware_cleanup_needed: "{{ check_opsware_files.stdout == 'True' }}"
        ansible_cleanup_needed: "{{ (check_ansible_workdir.stdout == 'True') or (check_ansible_programdata.stdout == 'True') or (check_ansible_progfiles.stdout == 'True') }}"
        bigfix_cleanup_needed: "{{ (check_bigfix_programdata.stdout == 'True') or (check_bigfix_progfiles.stdout == 'True') }}"
        ilmt_cleanup_needed: "{{ (check_ilmt_programdata.stdout == 'True') or (check_ilmt_progfiles.stdout == 'True') }}"

    - name: "Summary of cleanup verification"
      debug:
        msg: |
          === CLEANUP VERIFICATION SUMMARY for {{ inventory_hostname }} ===
          Using credentials: {{ credential_source | default('none') }}
          Inventory: {{ detected_inventory }}

          Cleanup Status:
          - ITM Cleanup Required: {{ itm_cleanup_needed | default('Unknown') }}
          - Opsware Cleanup Required: {{ opsware_cleanup_needed | default('Unknown') }}
          - Ansible Cleanup Required: {{ ansible_cleanup_needed | default('Unknown') }}
          - BigFix Cleanup Required: {{ bigfix_cleanup_needed | default('Unknown') }}
          - ILMT Cleanup Required: {{ ilmt_cleanup_needed | default('Unknown') }}

          Overall Status: {{ 'CLEANUP NEEDED' if (itm_cleanup_needed or opsware_cleanup_needed or ansible_cleanup_needed or bigfix_cleanup_needed or ilmt_cleanup_needed) else 'VERIFICATION PASSED' }}
