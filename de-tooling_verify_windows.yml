- name: Create OS groups
  hosts: localhost
  become: false
  gather_facts: false
  connection: local
  tasks:
    - name: Create OS group
      group_by:
        key: "machine_{{ ostype }}"
      changed_when: false
      when: ostype is defined
      delegate_to: localhost

    - name: Test DNS resolution
      command: host kmdwinccp001.adminkmd.local
      register: dns_check
      ignore_errors: true
      delegate_to: localhost

- name: CyberArk connectivity check
  hosts: localhost
  gather_facts: false
  vars:
    cyberark_url: "https://kmdwinccp001.adminkmd.local/"
    cyberark_timeout: 10
  tasks:
    - name: Test connectivity to CyberArk server
      uri:
        url: "{{ cyberark_url }}"
        method: GET
        timeout: "{{ cyberark_timeout }}"
        validate_certs: false
        status_code: [200, 401, 403, 404]  # Allow various HTTP responses as we just want to test connectivity
      register: cyberark_connectivity
      ignore_errors: true
      delegate_to: localhost

    - name: Display CyberArk connectivity result
      debug:
        msg: |
          CyberArk server connectivity test:
          URL: {{ cyberark_url }}
          Status: {% if cyberark_connectivity.failed %}FAILED{% else %}SUCCESS{% endif %}
          {% if not cyberark_connectivity.failed %}HTTP Status Code: {{ cyberark_connectivity.status }}{% endif %}
          {% if cyberark_connectivity.failed %}Error: {{ cyberark_connectivity.msg | default('Connection failed') }}{% endif %}
      delegate_to: localhost

    - name: Fail if CyberArk server is unreachable
      fail:
        msg: |
          Cannot reach CyberArk server at {{ cyberark_url }}
          This indicates a network connectivity issue. Please check:
          1. Network connectivity to the CyberArk server
          2. DNS resolution for kmdwinccp001.adminkmd.local
          3. Firewall rules allowing HTTPS traffic
          4. Proxy settings if applicable
          Error details: {{ cyberark_connectivity.msg | default('Connection failed') }}
      when: cyberark_connectivity.failed
      delegate_to: localhost

- name: Socks tunnel setup
  hosts: localhost
  gather_facts: false
  tasks:
    - include_role:
        name: ansible-role-event-socks-tunnel
        apply:
          check_mode: false
          delegate_to: localhost

    - set_fact:
        ansible_become_method: runas
        ansible_become_user: system
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    # Delete & create new KMD-AEVEN-TOOLS directory
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: "Verify if ITM and Ansible has been uninstalled on Windows server {{ nodename }}"
  hosts: "{{ nodename }}"
  become: true
  gather_facts: false
  tasks:
    - name: "Get-Processes on ITM"
      win_shell: Get-Process -Name "*ITM*"
      ignore_errors: yes
      register: script_getprocess_itm

    - name: "Get-Processes OPSWARE"
      win_shell: Get-Process -Name "*OPSWARE*"
      ignore_errors: yes
      register: script_getprocess_itm

    - name: "test if ansible has been cleared"
      ignore_errors: yes
      win_shell: (Test-Path "C:/ansible_workdir") -and ((Get-ChildItem -Path "C:/ansible_workdir" -Recurse -File | Measure-Object).Count -gt 0)

    - name: "test if ansible has been cleared"
      ignore_errors: yes
      win_shell: (Test-Path "C:/ProgramData/ansible") -and ((Get-ChildItem -Path "C:/ProgramData/ansible" -Recurse -File | Measure-Object).Count -gt 0)

    - name: "test if BigFix has been cleared"
      ignore_errors: yes
      win_shell: (Test-Path "C:/ProgramData/BigFix") -and ((Get-ChildItem -Path "C:/ProgramData/BigFix" -Recurse -File | Measure-Object).Count -gt 0)

    - name: "test if ilmt has been cleared"
      ignore_errors: yes
      win_shell: (Test-Path "C:/ProgramData/ilmt") -and ((Get-ChildItem -Path "C:/ProgramData/ilmt" -Recurse -File | Measure-Object).Count -gt 0)

    - name: "test if ansible has been cleared"
      ignore_errors: yes
      win_shell: (Test-Path "C:/PROGRA~1/ansible") -and ((Get-ChildItem -Path "C:/PROGRA~1/ansible" -Recurse -File | Measure-Object).Count -gt 0)

    - name: "test if BigFix has been cleared"
      ignore_errors: yes
      win_shell: (Test-Path "C:/PROGRA~1/BigFix") -and ((Get-ChildItem -Path "C:/PROGRA~1/BigFix" -Recurse -File | Measure-Object).Count -gt 0)

    - name: "test if ilmt has been cleared"
      ignore_errors: yes
      win_shell: (Test-Path "C:/PROGRA~1/ilmt") -and ((Get-ChildItem -Path "C:/PROGRA~1/ilmt" -Recurse -File | Measure-Object).Count -gt 0)

    - name: "test if lTM has been cleared"
      ignore_errors: yes
      win_shell: (Test-Path "C:/IBM/ITM/bin") -and ((Get-ChildItem -Path "C:/IBM/ITM" -Recurse -File | Measure-Object).Count -gt 0)

    - name: "test if SA-Agent OPSWARE has been installed"
      ignore_errors: yes
      win_shell: (Test-Path "/opt/opsware/agent/bin/") -and ((Get-ChildItem -Path "/opt/opsware/agent/bin/" -Recurse -File | Measure-Object).Count -gt 0)