- name: Pre-flight validation and inventory detection
  hosts: localhost
  gather_facts: false
  vars:
    # Define inventory suggestions based on hostname patterns
    inventory_suggestions:
      kmn_inventory: ["^kmn.*", ".*kmn.*"]
      kmw_inventory: ["^kmw.*", ".*kmw.*"]
      eng_inventory: ["^eng.*", ".*eng.*"]
      eng_HEM: ["^hem.*", ".*hem.*", ".*energinet.*"]
  tasks:
    - name: Check if running in single host mode
      set_fact:
        single_host_mode: "{{ nodename is defined }}"

    - name: Validate nodename exists in inventory (single host mode)
      block:
        - name: Check if specific host exists
          debug:
            msg: |
              Validating host: {{ nodename }}
              Current inventory hosts: {{ groups['all'] | default([]) | length }} hosts
              Host exists in current inventory: {{ nodename in (groups['all'] | default([])) }}
          when: nodename is defined

        - name: Suggest correct inventory if host not found
          block:
            - name: Detect likely inventory based on hostname pattern
              set_fact:
                suggested_inventory: >-
                  {%- for inv_name, patterns in inventory_suggestions.items() -%}
                    {%- for pattern in patterns -%}
                      {%- if nodename | lower is match(pattern) -%}
                        {{ inv_name }}
                      {%- endif -%}
                    {%- endfor -%}
                  {%- endfor -%}

            - name: Display detailed host not found error with suggestions
              debug:
                msg: |
                  ⚠️  HOST NOT FOUND IN CURRENT INVENTORY ⚠️

                  Requested host: {{ nodename }}
                  Current inventory contains: {{ groups['all'] | default([]) | length }} hosts

                  📋 SUGGESTED INVENTORY: {{ suggested_inventory | default('unknown - check manually') }}

                  🔍 TROUBLESHOOTING STEPS:
                  1. Try running with suggested inventory: {{ suggested_inventory | default('check all inventories manually') }}
                  2. Verify hostname spelling: '{{ nodename }}'
                  3. Check if host exists in these inventories:
                     - kmn_inventory (for KMN hosts: kmn*)
                     - kmw_inventory (for KMW hosts: kmw*, ebok*)
                     - eng_inventory (for Energinet hosts: eng*)
                     - eng_HEM (for HEM/Energinet hosts: hem*, energinet*)

                  🚀 RECOMMENDED ACTION:
                  Re-run this job template with inventory: {{ suggested_inventory | default('try each inventory') }}

            - name: Set fact to continue with empty host list rather than failing
              set_fact:
                host_not_found_but_continue: true
                should_skip_execution: true

          when:
            - nodename is defined
            - nodename not in (groups['all'] | default([]))

        - name: Display warning but continue execution if host not found
          debug:
            msg: |
              ⚠️  WARNING: Continuing execution with suggested inventory guidance above.
              The verification tasks will handle host filtering appropriately.
          when:
            - nodename is defined
            - nodename not in (groups['all'] | default([]))

        - name: Display validation success
          debug:
            msg: "✅ Host '{{ nodename }}' found in current inventory. Proceeding with execution."
          when:
            - nodename is defined
            - nodename in (groups['all'] | default([]))

      when: nodename is defined

    - name: Display inventory-wide execution mode
      debug:
        msg: |
          📊 INVENTORY-WIDE EXECUTION MODE
          Will process all Windows hosts in current inventory: {{ groups['all'] | default([]) | length }} total hosts
          Windows hosts will be auto-detected during execution
      when: nodename is not defined

- name: Create OS groups
  hosts: localhost
  become: false
  gather_facts: true
  connection: local
  tasks:
    - name: Create OS group
      group_by:
        key: "machine_{{ ostype }}"
      changed_when: false
      when: ostype is defined
      delegate_to: localhost

- name: Socks tunnel setup
  hosts: localhost
  gather_facts: false
  tasks:
    - include_role:
        name: ansible-role-event-socks-tunnel
        apply:
          check_mode: false
          run_once: true
          delegate_to: localhost

- name: Debug CyberArk credentials
  hosts: "{{ nodename | default('all') }}"
  gather_facts: true
  ignore_unreachable: true
  ignore_errors: true
  vars:
    # Define standard organizational credentials
    standard_credentials:
      kmn:
        tower_creds: ["kmn_cred_tower_and_sfs", "kmn_cred_tower_and_sfs_no_token"]
        description: "KMN Tower and SFS credentials"
      kmw:
        tower_creds: ["kmw_cred_tower_and_sfs", "kmw_cred_tower_and_sfs_no_token"]
        description: "KMW Tower and SFS credentials"
      eng:
        tower_creds: ["eng_cred_ansible_tower", "eng_cred_tower_and_sfs_no_token"]
        description: "Energinet Tower credentials"
  tasks:
    - name: Check if host exists in inventory
      debug:
        msg: |
          Host check for: {{ inventory_hostname }}
          Available hosts: {{ groups['all'] | default([]) | join(', ') }}
          Host found: {{ inventory_hostname in (groups['all'] | default([])) }}
      when: nodename is defined

    - name: Fail gracefully if host not found
      fail:
        msg: |
          Host '{{ nodename }}' not found in current inventory.
          Available hosts: {{ groups['all'] | default([]) | join(', ') }}
          Please check:
          1. Hostname spelling: {{ nodename }}
          2. Current inventory contains this host
          3. Try different inventory (kmn_inventory, kmw_inventory, eng_inventory, eng_HEM)
      when:
        - nodename is defined
        - groups['all'] | default([]) | length > 0
        - nodename not in (groups['all'] | default([]))

    - name: Display execution mode
      debug:
        msg: |
          Execution Mode: {{ 'Single Host' if nodename is defined else 'Inventory Wide' }}
          Target: {{ nodename | default('All hosts in inventory') }}
          Host: {{ inventory_hostname }}
      run_once: false

    - name: Gather facts to determine OS
      setup:
      ignore_errors: yes

    - name: Skip non-Windows hosts when running inventory-wide
      block:
        - name: Check if this is a Windows machine
          debug:
            msg: "Host {{ inventory_hostname }} is {{ ansible_facts['os_family'] | default('Unknown') }}"

        - name: Skip if not Windows (inventory-wide mode)
          meta: end_host
          when:
            - nodename is not defined  # Only skip in inventory-wide mode
            - ansible_facts['os_family'] is not defined or ansible_facts['os_family'] != 'Windows'

        - name: Display Windows host confirmation
          debug:
            msg: "Processing Windows host: {{ inventory_hostname }}"
          when: ansible_facts['os_family'] is defined and ansible_facts['os_family'] == 'Windows'

    - name: Verify nodename pattern (single host mode)
      block:
        - name: Check nodename match
          debug:
            msg: "Checking if {{ inventory_hostname }} matches pattern: {{ nodename }}"
          when: nodename is defined

        - name: Skip if not matching nodename pattern
          meta: end_host
          when:
            - nodename is defined
            - inventory_hostname != nodename
            - inventory_hostname not in (nodename.split(',') if ',' in nodename else [])
            - not (inventory_hostname is match(nodename) if '^' in nodename else False)

        - name: Confirm nodename match
          debug:
            msg: "Host {{ inventory_hostname }} matches nodename pattern: {{ nodename }}"
          when:
            - nodename is defined
            - (inventory_hostname == nodename or
               inventory_hostname in (nodename.split(',') if ',' in nodename else []) or
               (inventory_hostname is match(nodename) if '^' in nodename else False))

    - name: Auto-detect inventory based on hostname
      set_fact:
        detected_org: >-
          {%- if inventory_hostname | lower is match('^kmn.*') or 'kmn' in inventory_hostname | lower -%}
            kmn
          {%- elif inventory_hostname | lower is match('^kmw.*') or 'kmw' in inventory_hostname | lower or 'ebok' in inventory_hostname | lower -%}
            kmw
          {%- elif inventory_hostname | lower is match('^eng.*') or 'eng' in inventory_hostname | lower or 'hem' in inventory_hostname | lower or 'energinet' in inventory_hostname | lower -%}
            eng
          {%- else -%}
            unknown
          {%- endif -%}
        detected_inventory: >-
          {%- if inventory_hostname | lower is match('^kmn.*') or 'kmn' in inventory_hostname | lower -%}
            kmn_inventory
          {%- elif inventory_hostname | lower is match('^kmw.*') or 'kmw' in inventory_hostname | lower or 'ebok' in inventory_hostname | lower -%}
            kmw_inventory
          {%- elif inventory_hostname | lower is match('^eng.*') or 'eng' in inventory_hostname | lower -%}
            eng_inventory
          {%- elif inventory_hostname | lower is match('^hem.*') or 'hem' in inventory_hostname | lower or 'energinet' in inventory_hostname | lower -%}
            eng_HEM
          {%- else -%}
            unknown_inventory
          {%- endif -%}

    - name: Set organization credentials configuration
      set_fact:
        org_config: "{{ standard_credentials[detected_org] | default({}) }}"
      when: detected_org != 'unknown'

    - name: Display detected organization and inventory
      debug:
        msg: |
          Host: {{ inventory_hostname }}
          OS Family: {{ ansible_facts['os_family'] | default('Unknown') }}
          Detected Organization: {{ detected_org }}
          Detected Inventory: {{ detected_inventory }}
          Standard Tower Credentials: {{ org_config.tower_creds | default([]) }}
          Will lookup host-specific credentials:
          - OS: {{ detected_org }}_cred_{{ inventory_hostname }}_cyberark_*
          - Jumphost: {{ detected_org }}_cred_{{ inventory_hostname }}_sshproxy_*

    - name: Lookup host-specific OS credentials (HOST-SPECIFIC APPROACH)
      set_fact:
        ansible_user: "{{ lookup('cyberark', detected_org + '_cred_' + inventory_hostname + '_cyberark_user') }}"
        ansible_password: "{{ lookup('cyberark', detected_org + '_cred_' + inventory_hostname + '_cyberark_password') }}"
        credential_source: "host_specific_os"
      when: detected_org != 'unknown'
      no_log: true
      ignore_errors: yes

    - name: Lookup host-specific jumphost credentials (HOST-SPECIFIC APPROACH)
      set_fact:
        jumphost_user: "{{ lookup('cyberark', detected_org + '_cred_' + inventory_hostname + '_sshproxy_user') }}"
        jumphost_password: "{{ lookup('cyberark', detected_org + '_cred_' + inventory_hostname + '_sshproxy_password') }}"
        jumphost_credential_source: "host_specific_jumphost"
      when: detected_org != 'unknown'
      no_log: true
      ignore_errors: yes

    - name: Lookup standard tower credentials for organization
      set_fact:
        tower_credentials: {}
      when: detected_org != 'unknown'

    - name: Get tower credentials for organization
      set_fact:
        tower_credentials: "{{ tower_credentials | combine({ item: lookup('cyberark', item, errors='ignore') }) }}"
      loop: "{{ org_config.tower_creds | default([]) }}"
      when: detected_org != 'unknown' and org_config.tower_creds is defined
      no_log: true
      ignore_errors: yes

    - name: Display credential lookup results
      debug:
        msg: |
          Host-specific credential lookup for {{ inventory_hostname }}:
          - Organization: {{ detected_org }}
          - OS Credentials: {{ 'Found' if ansible_user is defined else 'Not Found' }}
          - Jumphost Credentials: {{ 'Found' if jumphost_user is defined else 'Not Found' }}
          - Tower Credentials: {{ org_config.tower_creds | default([]) | join(', ') }}
          - Credential Pattern: {{ detected_org }}_cred_{{ inventory_hostname }}_*

# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: "Verify if ITM and Ansible has been uninstalled on Windows servers"
  hosts: "{{ nodename | default('all') }}"
  become: true
  gather_facts: true
  tasks:
    - name: Check if host exists in current inventory (single host mode)
      block:
        - name: Display inventory mismatch warning
          debug:
            msg: |
              ⚠️  HOST NOT IN CURRENT INVENTORY WARNING ⚠️

              Requested host: {{ nodename }}
              Current host being processed: {{ inventory_hostname }}

              This host is not in the current inventory but the playbook is continuing
              for demonstration purposes. For actual verification, please use the
              correct inventory as suggested in the pre-flight validation.
          when:
            - nodename is defined
            - nodename != inventory_hostname

        - name: Skip execution for host not in inventory
          meta: end_host
          when:
            - nodename is defined
            - nodename != inventory_hostname
      when: nodename is defined

    - name: Display execution context
      debug:
        msg: |
          === VERIFICATION EXECUTION CONTEXT ===
          Mode: {{ 'Single Host' if nodename is defined else 'Inventory Wide (Windows only)' }}
          Target: {{ nodename | default('All Windows hosts in inventory') }}
          Current Host: {{ inventory_hostname }}
          OS Family: {{ ansible_facts['os_family'] | default('Unknown') }}

    - name: Skip non-Windows hosts in inventory-wide mode
      meta: end_host
      when:
        - nodename is not defined  # Inventory-wide mode
        - ansible_facts['os_family'] is not defined or ansible_facts['os_family'] != 'Windows'

    - name: Skip if not matching nodename pattern (single host mode)
      meta: end_host
      when:
        - nodename is defined  # Single host mode
        - inventory_hostname != nodename
        - inventory_hostname not in (nodename.split(',') if ',' in nodename else [])
        - not (inventory_hostname is match(nodename) if '^' in nodename else False)

    - name: Verify host has credentials assigned
      debug:
        msg: |
          Host: {{ inventory_hostname }}
          Inventory: {{ detected_inventory | default('not_detected') }}
          OS Credentials: {{ 'assigned' if ansible_user is defined else 'missing' }}
          Jumphost Credentials: {{ 'assigned' if jumphost_user is defined else 'missing' }}
          Credential Source: {{ credential_source | default('none') }}

    - name: Skip if no credentials found
      meta: end_host
      when: ansible_user is not defined or detected_inventory is not defined

    - name: Test connection with assigned credentials
      win_ping:
      ignore_errors: yes
      register: connection_test

    - name: Display connection status
      debug:
        msg: "Connection to {{ inventory_hostname }} ({{ detected_inventory }}): {{ 'SUCCESS' if connection_test is succeeded else 'FAILED' }}"

    - name: Skip if connection failed
      meta: end_host
      when: connection_test is failed

    # Primary verification - Directory/File checks (Most Reliable)
    - name: "Verify ITM installation directories cleared"
      win_shell: (Test-Path "C:/IBM/ITM/bin") -and ((Get-ChildItem -Path "C:/IBM/ITM" -Recurse -File -ErrorAction SilentlyContinue | Measure-Object).Count -gt 0)
      ignore_errors: yes
      register: check_itm_files

    - name: "Verify Opsware installation directories cleared"
      win_shell: (Test-Path "C:/Program Files/Opsware/agent/bin") -and ((Get-ChildItem -Path "C:/Program Files/Opsware/agent/bin" -Recurse -File -ErrorAction SilentlyContinue | Measure-Object).Count -gt 0)
      ignore_errors: yes
      register: check_opsware_files

    # Secondary verification - Service checks (Additional context)
    - name: "Check ITM services status"
      win_shell: "[bool](Get-Service KNT*, K06* -ErrorAction SilentlyContinue)"
      ignore_errors: yes
      register: get_service_itm

    - name: "Check Opsware services status"
      win_shell: "[bool](Get-Service opsware* -ErrorAction SilentlyContinue)"
      ignore_errors: yes
      register: get_service_SA

    #  ----------------------------------------------------------------------------------------------------------------
    #  verify if directories exists
    #  ----------------------------------------------------------------------------------------------------------------

    - name: "test if ansible workdir has been cleared"
      ignore_errors: yes
      win_shell: (Test-Path "C:/ansible_workdir") -and ((Get-ChildItem -Path "C:/ansible_workdir" -Recurse -File -ErrorAction SilentlyContinue | Measure-Object).Count -gt 0)
      register: check_ansible_workdir

    - name: "test if ansible ProgramData has been cleared"
      ignore_errors: yes
      win_shell: (Test-Path "C:/ProgramData/ansible") -and ((Get-ChildItem -Path "C:/ProgramData/ansible" -Recurse -File -ErrorAction SilentlyContinue | Measure-Object).Count -gt 0)
      register: check_ansible_programdata

    - name: "test if BigFix ProgramData has been cleared"
      ignore_errors: yes
      win_shell: (Test-Path "C:/ProgramData/BigFix") -and ((Get-ChildItem -Path "C:/ProgramData/BigFix" -Recurse -File -ErrorAction SilentlyContinue | Measure-Object).Count -gt 0)
      register: check_bigfix_programdata

    - name: "test if ilmt ProgramData has been cleared"
      ignore_errors: yes
      win_shell: (Test-Path "C:/ProgramData/ilmt") -and ((Get-ChildItem -Path "C:/ProgramData/ilmt" -Recurse -File -ErrorAction SilentlyContinue | Measure-Object).Count -gt 0)
      register: check_ilmt_programdata

    - name: "test if ansible Program Files has been cleared"
      ignore_errors: yes
      win_shell: (Test-Path "C:/PROGRA~1/ansible") -and ((Get-ChildItem -Path "C:/PROGRA~1/ansible" -Recurse -File -ErrorAction SilentlyContinue | Measure-Object).Count -gt 0)
      register: check_ansible_progfiles

    - name: "test if BigFix Program Files has been cleared"
      ignore_errors: yes
      win_shell: (Test-Path "C:/PROGRA~1/BigFix") -and ((Get-ChildItem -Path "C:/PROGRA~1/BigFix" -Recurse -File -ErrorAction SilentlyContinue | Measure-Object).Count -gt 0)
      register: check_bigfix_progfiles

    - name: "test if ilmt Program Files has been cleared"
      ignore_errors: yes
      win_shell: (Test-Path "C:/PROGRA~1/ilmt") -and ((Get-ChildItem -Path "C:/PROGRA~1/ilmt" -Recurse -File -ErrorAction SilentlyContinue | Measure-Object).Count -gt 0)
      register: check_ilmt_progfiles

    # Final determination based on file presence (most reliable)
    - name: "Set cleanup status"
      set_fact:
        itm_cleanup_needed: "{{ check_itm_files.stdout == 'True' }}"
        opsware_cleanup_needed: "{{ check_opsware_files.stdout == 'True' }}"
        ansible_cleanup_needed: "{{ (check_ansible_workdir.stdout == 'True') or (check_ansible_programdata.stdout == 'True') or (check_ansible_progfiles.stdout == 'True') }}"
        bigfix_cleanup_needed: "{{ (check_bigfix_programdata.stdout == 'True') or (check_bigfix_progfiles.stdout == 'True') }}"
        ilmt_cleanup_needed: "{{ (check_ilmt_programdata.stdout == 'True') or (check_ilmt_progfiles.stdout == 'True') }}"

    - name: "Summary of cleanup verification"
      debug:
        msg: |
          === CLEANUP VERIFICATION SUMMARY for {{ inventory_hostname }} ===
          Execution Mode: {{ 'Single Host' if nodename is defined else 'Inventory Wide (Windows only)' }}
          Using credentials: {{ credential_source | default('none') }}
          Inventory: {{ detected_inventory }}
          OS Family: {{ ansible_facts['os_family'] | default('Unknown') }}

          Cleanup Status:
          - ITM Cleanup Required: {{ itm_cleanup_needed | default('Unknown') }}
          - Opsware Cleanup Required: {{ opsware_cleanup_needed | default('Unknown') }}
          - Ansible Cleanup Required: {{ ansible_cleanup_needed | default('Unknown') }}
          - BigFix Cleanup Required: {{ bigfix_cleanup_needed | default('Unknown') }}
          - ILMT Cleanup Required: {{ ilmt_cleanup_needed | default('Unknown') }}

          Overall Status: {{ 'CLEANUP NEEDED' if (itm_cleanup_needed or opsware_cleanup_needed or ansible_cleanup_needed or bigfix_cleanup_needed or ilmt_cleanup_needed) else 'VERIFICATION PASSED' }}

- name: Debug host lookup across inventories
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Display search information
      debug:
        msg: |
          Searching for host: {{ nodename | default('no nodename specified') }}
          Current inventory: {{ inventory_file | default('unknown') }}
          Available hosts in current inventory: {{ groups['all'] | default([]) }}

    - name: Suggest inventory check
      debug:
        msg: |
          Host '{{ nodename }}' not found in current inventory.
          Please verify:
          1. Host exists in one of: kmn_inventory, kmw_inventory, eng_inventory, eng_HEM
          2. Hostname spelling is correct
          3. Using the correct inventory for this job template
      when: nodename is defined and nodename not in (groups['all'] | default([]))
