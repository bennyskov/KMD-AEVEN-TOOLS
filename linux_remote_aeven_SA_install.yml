- name: Create OS groups
  hosts: '{{ hostlist }}'
  become: false
  gather_facts: false
  connection: local
  tasks:
    - name: Create OS group
      group_by:
        key: 'machine_{{ ostype }}'
      changed_when: false
      when: ostype is defined
      delegate_to: localhost

- name: Socks tunnel setup
  hosts: '{{ hostlist }}'
  gather_facts: false
  tasks:
    - include_role:
        name: ansible-role-event-socks-tunnel
        apply:
          check_mode: false
          run_once: true
          delegate_to: localhost
      vars:
        acc_id: '{{ blueid_shortcode }}'
        transaction_id: '{{ tower_job_id }}'
        trans_num: '{{ tower_job_id }}'

    - set_fact:
        ansible_become_user: root
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
# working on LOCALHOST
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: gather_facts LOCALHOST
  hosts: localhost
  gather_facts: true
  tasks:
    # - name: Debug facts
    #   debug:
    #     msg: 'Debug ansible_facts ==>|{{ ansible_facts }}'
    #   tags:
    #     - debug_facts

    - name: 'List homedir files'
      shell: 'ls -lrta'
      register: script_homedir
    - name: Output list homedir
      debug:
        var: script_homedir.stdout_lines

    - name: 'List /var/'
      shell: 'ls -lrta /var/'
      register: script_tmp
    - name: Output list tmp
      debug:
        var: script_tmp.stdout_lines

    - meta: clear_host_errors

# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
# now working on {{ hostlist }} host
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
#
# Installation playbook of Opsware agent on linux
#
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: 'Installation playbook of SA Opsware agent for Aeven on server {{ hostlist }}'
  hosts: '{{ hostlist }}'
  become: true
  run_once: true
  gather_facts: false
  vars:
    agentdir: '/opt/opsware/agent/bin/'
    vardir: '/var/tmp/opsware-agent-linux/'
    logfile: 'sa_agent_install.log'
  tasks:
    - name: Copy, create, exec file
      block:
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        # Delete & create & copy files to dir /tmp/opsware-agent-linux/
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: 'Delete {{ vardir }} directory on {{ hostlist }}'
          ignore_errors: yes
          file:
            path: '{{ vardir }}'
            state: absent
        - name: copy multiple items
          copy:
            src: '{{ item.src }}'
            dest: '{{ item.dest }}'
            mode: 0777
          loop:
            - src: scripts/
              dest: '{{ vardir }}'
            - src: opsware-agent-linux/
              dest: '{{ vardir }}'
        - name: Set permissions for dir
          ignore_errors: yes
          file:
            path: '{{ vardir }}'
            state: directory
            mode: 0777
            recurse: yes
            force: yes
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        # list {{ vardir }}
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: 'List {{ vardir }}'
          ignore_errors: yes
          shell: 'ls -lrta {{ vardir }}*'
          register: script_vardir_before
        - name: 'send content to ansible'
          debug:
            var: script_vardir_before.stdout_lines
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        # list {{ agentdir }}
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: 'List {{ agentdir }}'
          ignore_errors: yes
          shell: 'ls -lrta {{ agentdir }}'
          register: list_agentdir_out
        - name: 'send content to ansible'
          debug:
            var: list_agentdir_out.stdout_lines
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        # run UNINSTALL
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: 'Check if the agent_uninstall.sh exists'
          stat:
            path: '{{ agentdir }}agent_uninstall.sh'
          register: file_stat_uninstall_sh

        - name: Run UNINSTALL
          shell: sh {{ agentdir }}agent_uninstall.sh --force
          args:
            chdir: '{{ agentdir }}'
          register: output_from_uninstall
          when: file_stat_uninstall_sh.stat.exists

        - name: 'send content to ansible'
          debug:
            msg: 'aeven_uninout ==>|{{ output_from_uninstall.stdout }}'
          when: file_stat_uninstall_sh.stat.exists
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        # run INSTALL
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: Run INSTALL
          shell: 'sh {{ vardir }}sa_agent_install.sh'
          args:
            chdir: '{{ vardir }}'
          register: output_from_INSTALL

        - name: 'send output_from_INSTALL to ansible'
          debug:
            msg: 'aeven_uninout ==>|{{ output_from_INSTALL.stdout }}'

        - name: reset permissions dir
          ignore_errors: yes
          file:
            path: '{{ vardir }}'
            state: directory
            mode: 0777
            recurse: yes
            force: yes
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        # aeven_saagout    saagtfile: "sa_agent_install.log"   # the one created by bat file
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: 'Read content from {{ logfile }}'
          shell: cat "{{ vardir }}{{ logfile }}"
          register: sa_agent_install_log

        - name: 'send content to ansible'
          debug:
            msg: "aeven_saagout ==>|{{ sa_agent_install_log.stdout }}"
          when: stat_install_logfile.stat.exists
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        # list {{ vardir }}
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: 'List {{ vardir }}'
          shell: 'ls -lrta {{ vardir }}*'
          register: script_after_run

        - name: 'send content to ansible'
          debug:
            var: script_after_run.stdout_lines
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        # list {{ agentdir }}
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: 'List {{ agentdir }}'
          shell: 'ls -lrta {{ agentdir }}*'
          register: agentdir_after_run

        - name: 'send content to ansible'
          debug:
            var: agentdir_after_run.stdout_lines
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        # list {{ vardir }}
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: 'List {{ vardir }}'
          shell: 'ls -lrta {{ vardir }}*'
          register: vardir_after_run

        - name: 'send content to ansible'
          debug:
            var: vardir_after_run.stdout_lines
      # always:
      #   - name: Delete temp {{ vardir }} agent directory
      #     file:
      #       path: "{{ vardir }}"
      #       state: absent
