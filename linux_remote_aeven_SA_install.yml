- name: Create OS groups
  hosts: "{{ hostlist }}"
  become: false
  gather_facts: false
  connection: local
  tasks:
    - name: Create OS group
      group_by:
        key: "machine_{{ ostype }}"
      changed_when: false
      when: ostype is defined
      delegate_to: localhost

- name: Socks tunnel setup
  hosts: "{{ hostlist }}"
  gather_facts: false
  tasks:
    - include_role:
        name: ansible-role-event-socks-tunnel
        apply:
          check_mode: false
          run_once: true
          delegate_to: localhost
      vars:
        acc_id: "{{ blueid_shortcode }}"
        transaction_id: "{{ tower_job_id }}"
        trans_num: "{{ tower_job_id }}"

    - set_fact:
        ansible_become_user: root
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
# working on LOCALHOST
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: gather_facts LOCALHOST
  hosts: localhost
  gather_facts: true
  tasks:
    - name: Debug facts 
      debug:
        msg: |-
          "{{ ansible_facts }}"
      tags:
        - debug_facts

    - name: "List homedir files"
      shell: "ls -lrt"
      register: script_homedir
    - name: Output list homedir
      debug:
        var: script_homedir.stdout_lines

    - name: "List /tmp/"
      shell: "ls -lrt /tmp/"
      register: script_tmp
    - name: Output list tmp
      debug:
        var: script_tmp.stdout_lines   
         
    - meta: clear_host_errors

# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
# now working on {{ hostlist }} host
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
#
# Installation playbook of Opsware agent on linux
#
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: "Installation playbook of SA Opsware agent for Aeven on server {{ hostlist }}"
  hosts: "{{ hostlist }}"
  become: true
  gather_facts: false
  vars:
    agentdir: "/opt/opsware/agent/bin/"
    tmpdir: "/tmp/opsware-agent-linux/"
    logfile: "sa-agent_install.log"  
    stdoutfile: "sa-agent_stdout.log"      
    uninstall_stdout: "sa-agent_uninstall_stdout.log"      
  tasks:
    - name: Copy, create, exec file
      block:
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        # write global vars
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: "print debug vars {{ hostlist }}"
          debug:
            msg: |-
              "tmpdir = {{ tmpdir }}"
          tags:
            - debug_vars
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        # Delete & create & copy files to dir /tmp/opsware-agent-linux/ 
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: "Delete {{ tmpdir }} directory on {{ hostlist }}"
          run_once: true
          file:
            path: "{{ tmpdir }}"
            state: absent 

        # - name: Create tmpdir directory
        #   file:
        #     path: "{{ tmpdir }}"
        #     state: directory
        #     mode: 0777

        - name: copy multiple items
          copy: 
            src: "{{ item.src }}" 
            dest: "{{ item.dest }}"
            mode: 0777

          loop:
            - src: scripts/
              dest: "{{ tmpdir }}"

            - src: opsware-agent-linux/
              dest: "{{ tmpdir }}"

        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        # list {{ tmpdir }}
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------

        - name: "List {{ tmpdir }}"
          shell: "ls -lrt {{ tmpdir }}*"
          register: script_tmpdir_before
        - name: Output list script_tmpdir_before
          debug:
            var: script_tmpdir_before.stdout_lines

        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        # list {{ agentdir }}
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------

        - name: "Check if the {{ agentdir }} exists"
          stat:
            path: "{{ agentdir }}"
          register: file_stat_agentdir

        - name: "List {{ agentdir }}"
          shell: "ls -lrt {{ agentdir }}"
          register: list_agentdir_out
          when: file_stat_agentdir.stat.exists

        - name: list_agentdir Output
          debug:
            var: list_agentdir_out.stdout_lines
          when: file_stat_agentdir.stat.exists

        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        # run UNINSTALL
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: "Check if the agent_uninstall.sh exists"
          stat:
            path: "{{ agentdir }}agent_uninstall.sh"
          register: file_stat_uninstall_sh

        - name: Run UNINSTALL
          shell: sh {{ agentdir }}agent_uninstall.sh --force > {{ tmpdir }}{{ uninstall_stdout }} 2>&1
          args:
            chdir: "{{ agentdir }}"
          register: script_uninstall_stdout_lines
          when: file_stat_uninstall_sh.stat.exists

        - name: "Read content from stdout if not catched by pipe"
          debug:
            var: script_uninstall_stdout_lines.stdout_lines      
          when: file_stat_uninstall_sh.stat.exists
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        # send {{ uninstall_stdout }} to ansible stdout
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------

        - name: "Check if the {{ uninstall_stdout }} exists"
          stat:
            path: "{{ tmpdir }}{{ uninstall_stdout }}"
          register: file_stat_uninstall_stdoutfile

        - name: "Read content from {{ uninstall_stdout }}"
          run_once: true
          shell: cat "{{ tmpdir }}{{ uninstall_stdout }}"
          register: sa_agent_uninstall_stdout_log
          when: file_stat_uninstall_stdoutfile.stat.exists

        - name: "send content to ansible"
          debug:
            msg: |-
              "sa_agent_uninstall_stdout_log: {{ sa_agent_uninstall_stdout_log.stdout }}"
          when: file_stat_uninstall_stdoutfile.stat.exists

        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        # run INSTALL
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------

        - name: Run INSTALL
          shell: sh {{ tmpdir }}sa_agent_install.sh > {{ tmpdir }}{{ stdoutfile }} 2>&1
          args:
            chdir: "{{ tmpdir }}"
          register: script_install_stdout_lines

        - name: "Read content from script_install_stdout_lines"
          debug:
            var: script_install_stdout_lines.stdout_lines      

        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        # list {{ tmpdir }}
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------

        - name: "List {{ tmpdir }}"
          shell: "ls -lrt {{ tmpdir }}*"
          register: script_tmp_after_run
        - name: Output list script_tmp_after_run
          debug:
            var: script_tmp_after_run.stdout_lines        
        
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        # list {{ agentdir }}
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------

        - name: "Check if the {{ agentdir }} exists"
          stat:
            path: "{{ agentdir }}"
          register: file_stat_agentdir2

        - name: "List {{ agentdir }}"
          shell: "ls -lrt {{ agentdir }}"
          register: list_agentdir_out2
          when: file_stat_agentdir2.stat.exists

        - name: list_agentdir Output
          debug:
            var: list_agentdir_out2.stdout_lines
          when: file_stat_agentdir2.stat.exists

        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        # send {{ stdoutfile }} to ansible stdout
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: "Check if the {{ stdoutfile }} exists"
          stat:
            path: "{{ tmpdir }}{{ stdoutfile }}"
          register: file_stat_install_stdout

        - name: "Read content from {{ stdoutfile }}"
          run_once: true
          shell: cat "{{ tmpdir }}{{ stdoutfile }}"
          register: sa_agent_install_stdout_log 
          when: file_stat_install_stdout.stat.exists

        - name: "send content to ansible"
          debug:
            msg: |-
              "sa_agent_install_stdout_log: {{ sa_agent_install_stdout_log.stdout }}"
          when: file_stat_install_stdout.stat.exists

        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        # send {{ logfile }} to ansible stdout
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        
        - name: "Check if the {{ logfile }} exists"
          stat:
            path: "{{ tmpdir }}{{ logfile }}"
          register: file_stat_install_logfile

        - name: "Read content from {{ logfile }}"
          run_once: true
          shell: cat "{{ tmpdir }}{{ logfile }}"
          register: sa_agent_install_logfile_log
          when: file_stat_install_logfile.stat.exists

        - name: "send content to ansible"
          debug:
            msg: |-
              "sa_agent_install_logfile_log: {{ sa_agent_install_logfile_log.stdout }}"                          
          when: file_stat_install_logfile.stat.exists
