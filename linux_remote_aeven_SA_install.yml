- name: Create OS groups
- name: Create OS groups
  # hosts: "kmdapp1068"
  # hosts: "kmdapp1128"
  hosts: "{{ hostlist }}"
  become: false
  gather_facts: false
  connection: local
  tasks:
    - name: Create OS group
      group_by:
        key: "machine_{{ ostype }}"
      changed_when: false
      when: ostype is defined
      delegate_to: localhost

- name: Socks tunnel setup
  hosts: localhost
  gather_facts: false
  tasks:
    - include_role:
        name: ansible-role-event-socks-tunnel
        apply:
          check_mode: false
          run_once: true
          delegate_to: localhost
      vars:
        acc_id: "{{ blueid_shortcode }}"
        transaction_id: "{{ tower_job_id }}"
        trans_num: "{{ tower_job_id }}"

    - set_fact:
        ansible_become_method: runas
        ansible_become_user: system
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
# working on LOCALHOST
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: gather_facts LOCALHOST
  hosts: localhost
  gather_facts: true
  tasks:
    - name: Debug facts 
      debug:
        msg: |-
          "{{ ansible_facts }}"
      tags:
        - debug_facts

    - name: "List homedir files"
      shell: "ls -lrt"
      register: script_homedir
    - name: Output list homedir
      debug:
        var: script_homedir.stdout_lines

    - name: "List /tmp/"
      shell: "ls -lrt /tmp/"
      register: script_tmp
    - name: Output list tmp
      debug:
        var: script_tmp.stdout_lines    

# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
# now working on {{ hostlist }} host
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
#
# Installation playbook of a ITM agent on Windows server
#
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: "Installation playbook of a ITM agent on Windows server {{ hostlist }}"
  hosts: "{{ hostlist }}"
  become: true
  gather_facts: true
  vars:
    PortablePythonZip: "PortablePython.zip"
    PortablePythonDir: "PortablePython"
    itmZip: "ITM_win_6307SP14-349-1KMD.zip"
    RepoUrl: "http://84.255.93.70:8080/repository/ITM/"
    tmpdir: "C:/Temp/scripttemp_dir/"
    debugfile: "ITMAgentInstall_windows_debugfile.log"
    pingfile: "ITMAgentInstall_windows_pingfile.log"
    no_proxy: 84.255.93.70
    account_code: "{{ hostvars['localhost']['org'] }}"
    trans_num: "{{ tower_job_id }}"
  tasks:
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    # write global vars
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    - name: "print debug vars {{ hostlist }}"
      debug:
        msg: |-
          "RepoUrl = {{ RepoUrl }}"
          "PortablePythonZip = {{ PortablePythonZip }}"
          "itmZip = {{ itmZip }}"
          "account_code = {{ account_code }}"
          "trans_num = {{ trans_num }}"
          "tmpdir = {{ tmpdir }}"
          "debugfile = {{ debugfile }}"
          "pingfile = {{ pingfile }}"
          "ansible_facts = {{ ansible_facts }}"
      tags:
        - debug_vars

    - name: "Get current machine"
      run_once: true
      raw: $ENV:PATH
      register: path_out
    - name: "Output result"
      debug:
        var: path_out.stdout_lines 
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    # Delete & create new scripttemp_dir directory
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    # - name: "Get-Processes on  {{ hostlist }}"
    #   run_once: true
    #   win_shell: Get-Process -Name "*ITM*"
    #   ignore_errors: yes
    #   register: script_getprocess

    # - name: Output list script_getprocess
    #   debug:
    #     var: script_getprocess.stdout_lines

    - name: "Delete scripttemp_dir directory on  {{ hostlist }}"
      run_once: true
      win_file:
        path: "{{ tmpdir }}"
        state: absent 

    - name: "Create scripttemp_dir"
      run_once: true
      win_file:
        path: "{{ tmpdir }}"
        state: directory
        remote_src: no
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    # copy scripts to {{ tmpdir }}
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    - name: "copy scripts to {{ tmpdir }}"
      run_once: true
      win_copy: 
        src: "{{ item.src }}" 
        dest: "{{ item.dest }}"
      loop:
        - src: "scripts/ITMAgentInstall_windows.cmd"
          dest: "{{ tmpdir }}ITMAgentInstall_windows.cmd"

        - src: "scripts/ITMAgentInstall_windows.py"
          dest: "{{ tmpdir }}ITMAgentInstall_windows.py"

        - src: "bin/ITMRmvAll.exe"
          dest: "{{ tmpdir }}ITMRmvAll.exe"
        
        - src: "ITMconfig/rtems.csv"
          dest: "{{ tmpdir }}rtems.csv"
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    # Download PortablePythonZip from repository to localhost, copy to target host and unzip
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    - name: "Download {{ PortablePythonZip }} from repository to server"
      delegate_to: localhost
      become: false          
      get_url:
        url: "{{ RepoUrl }}{{ PortablePythonZip }}"
        dest: /tmp/{{ PortablePythonZip }}
        mode: '0644'
        force: true
      register: download_PortablePythonZip_result
        
    - name: "Debug installer download"
      debug:
        msg: |-
          "download_PortablePythonZip_result: {{ download_PortablePythonZip_result }}"
      tags:
        - debug_out
    
    - name: "Copy {{ PortablePythonZip }} archive to target host"
      run_once: true
      win_copy:
        src: /tmp/{{ PortablePythonZip }}
        dest: "{{ tmpdir }}{{ PortablePythonZip }}"
        remote_src: no

    - name: "Unzip {{ PortablePythonZip }} file"
      run_once: true
      win_unzip:
        src: "{{ tmpdir }}{{ PortablePythonZip }}"
        dest: "{{ tmpdir }}{{ PortablePythonDir }}"
        delete_archive: yes
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    # Download itmZip from repository to localhost, copy to target host and unzip
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    - name: "Download {{ itmZip }} from repository to localhost"
      delegate_to: localhost
      run_once: true
      become: false          
      get_url:
        url: "{{ RepoUrl }}{{ itmZip }}"
        dest: /tmp/{{ itmZip }}
        mode: '0644'
        force: true
      register: download_itmZip_result
        
    - name: "Debug installer download"
      debug:
        msg: |-
          "download_itmZip_result: {{ download_itmZip_result }}"
      tags:
        - debug_out

    - name: "Copy {{ itmZip }} archive to target host"
      run_once: true
      win_copy:
        src: /tmp/{{ itmZip }}
        dest: "{{ tmpdir }}{{ itmZip }}"
        remote_src: no

    - name: "Unzip {{ itmZip }} file"
      run_once: true
      win_unzip:
        src: "{{ tmpdir }}{{ itmZip }}"
        dest: "{{ tmpdir }}"
        delete_archive: yes
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    # run python script
    # {{ tmpdir }}PortablePython/Scripts/python.exe {{ tmpdir }}ITMAgentInstall_windows.py
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    - name: Run ITMAgentInstall_windows
      win_shell: >
        ./ITMAgentInstall_windows.cmd
        -nodename {{ hostlist }}
        -ccode {{ ccode }}
        -shore {{ shore }}
        -envir {{ envir }}
        {{ primary }}
        {{ secondary }}
        {{ pingonly }}
        {{ force }}
      args:
        chdir: "{{ tmpdir }}"
      register: script_run

    - name: Output result
      debug:
        var: script_run.stdout_lines
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    # send debugfiles to ansible stdout
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    - name: "Get-Item Env:PATH at the end"
      run_once: true
      win_shell: ($env:Path).split(';') | Out-string -Width 300
      register: cmd_output3
    - name: "Display cmd_output3"
      debug:
        var: cmd_output3.stdout_lines
    
    - name: "List {{ tmpdir }}"
      run_once: true
      win_shell: Get-ChildItem -Path {{ tmpdir }}
      register: script_tmpdir2
    - name: "Output result at the end"
      debug:
        var: script_tmpdir2.stdout_lines 
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    # send debugfiles to ansible stdout
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    - name: "Read content from {{ debugfile }}"
      run_once: true
      win_shell: Get-Content -LiteralPath "{{ tmpdir }}{{ debugfile }}"
      register: file_content_debug
    - name: "Display content in debug output"
      debug:
        msg: |-
          "file_content_debug: {{ file_content_debug.stdout }}"      

    - name: "Read content from {{ debugfile }}"
      run_once: true
      win_shell: Get-Content -LiteralPath "{{ tmpdir }}{{ pingfile }}"
      register: file_content_ping
    - name: "Display content in ping output"
      debug:
        msg: |-
          "file_content_ping: {{ file_content_ping.stdout }}"
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    # cleanup
    # Remove dir {{ tmpdir }}PortablePython from target host. dont work inside script, because python.exe is running and cleanup on localhost (cacf server)
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    - name: Remove dir {{ tmpdir }}PortablePython from target host
      ignore_errors: true
      win_file:
        path: "{{ tmpdir }}PortablePython"
        state: absent

    - name: Remove dir {{ tmpdir }}PortablePython from target host
      ignore_errors: true
      win_file:
        path: "{{ tmpdir }}ITM_win_6307SP14-349-1KMD"
        state: absent

    - name: Remove ITMAgentInstall_windows.cmd
      ignore_errors: true
      win_file:
        path: "{{ tmpdir }}ITMAgentInstall_windows.cmd"
        state: absent

    - name: Remove ITMAgentInstall_windows.py
      ignore_errors: true
      win_file:
        path: "{{ tmpdir }}ITMAgentInstall_windows.py"
        state: absent

    - name: Remove zip file from localhost
      delegate_to: localhost
      run_once: true
      become: false
      ignore_errors: true
      file:
        path: /tmp/{{ itmZip }}
        state: absent

    - name: "Remove zip file from localhost"
      delegate_to: localhost
      run_once: true
      become: false
      ignore_errors: true
      file:
        path: /tmp/{{ PortablePythonZip }}
        state: absent        