- name: Create OS groups
  hosts: "{{ hostlist }}"
  become: false
  gather_facts: false
  connection: local
  tasks:
    - name: Create OS group
      group_by:
        key: "machine_{{ ostype }}"
      changed_when: false
      when: ostype is defined
      delegate_to: localhost

- name: Socks tunnel setup
  hosts: 'machine_windows'
  gather_facts: false
  tasks:
    - include_role:
        name: ansible-role-event-socks-tunnel
        apply:
          check_mode: false
          run_once: true
          delegate_to: localhost
      vars:
        acc_id: "{{ blueid_shortcode }}"
        transaction_id: "{{ tower_job_id }}"
        trans_num: "{{ tower_job_id }}"

    - set_fact:
        ansible_become_method: runas
        ansible_become_user: system

# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
# now working on {{ hostlist }} host
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
#
# Installation playbook of Opsware agent on windows
#
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: "Installation playbook of SA Opsware agent for Aeven on server {{ hostlist }}"
  hosts: "{{ hostlist }}"
  become: true
  gather_facts: false
  vars:
    tmpdir: "C:/Windows/Temp/opsware-agent-windows/"  
    logfile: "sa-agent_install.log"   # the one created by bat file
    stdoutfile: "sa-agent_stdout.log" # the redirect
  tasks:
    - name: Copy, create, exec, fetch output
      # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
      # Delete & create & copy files to dir {{ tmpdir }}
      # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
      block:
        - name: "SA.01 - Get PATH for machine"
          run_once: true
          raw: $ENV:PATH
          register: path_out

        - name: "SA.02 - Output result"
          debug:
            var: path_out.stdout_lines    
    
        - name: "SA.03 - Delete {{ tmpdir }} directory on {{ hostlist }}"
          run_once: true
          win_file:
            path: "{{ tmpdir }}"
            state: absent

        - name: "SA.04 - Create {{ tmpdir }} directory on {{ hostlist }}"
          win_file:
            path: "{{ tmpdir }}"
            state: directory

        - name: "SA.05 - copy multiple items"
          win_copy: 
            src: "{{ item.src }}" 
            dest: "{{ item.dest }}"

          loop:
            - src: scripts/
              dest: "{{ tmpdir }}"

            - src: opsware-agent-windows/
              dest: "{{ tmpdir }}" 

        - name: "SA.06 - List {{ tmpdir }} BEFORE"
          run_once: true
          win_shell: Get-ChildItem -Path {{ tmpdir }}
          register: dir_of_tmpdir_before
        
        - name: "SA.08 - list dir of {{ tmpdir }} at the BEFORE"
          debug:
            var: dir_of_tmpdir_before.stdout_lines 
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        # run installer
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: "SA.09 - Run command"
          win_command: "{{ tmpdir }}sa_agent_install.bat > {{ tmpdir }}{{ redirfile }} 2>&1"
          ignore_errors: yes      
          args:
            chdir: "{{ tmpdir }}"
          register: script_run

        - name: "SA.10 - Output list"
          debug:
            var: script_run.stdout_lines

        - name: "SA.11 - List {{ tmpdir }} AFTER"
          run_once: true
          ignore_errors: yes      
          win_shell: Get-ChildItem -Path {{ tmpdir }}
          register: dir_of_tmpdir_after
        - name: "SA.12 - list dir of {{ tmpdir }} at the AFTER"
          debug:
            var: dir_of_tmpdir_after.stdout_lines 

        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        # send rediroutfiles to ansible stdout
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        #  aeven_saagtout    saagtfile: "sa-agent_stdout.log"   # the one created by bat file
        - name: "SA.13 - Read content from {{ saagtfile }}"  # the one created by bat file
          run_once: true
          win_shell: Get-Content -LiteralPath "{{ tmpdir }}{{ saagtfile }}"
          register: file_content_saagtfile
        
        - name: "SA.14 - Display {{ saagtfile }} content"
          debug:
            msg: |-
              "aeven_saagtout {{ file_content_saagtfile.stdout }}"

          #  aeven_redirout    redirfile: "sa-agent_rdiout.log"   # the redirect
        - name: "SA.15 - Read content from {{ redirfile }}" # the redirect
          run_once: true
          win_shell: Get-Content -LiteralPath "{{ tmpdir }}{{ redirfile }}"
          register: file_content_redirout
        
        - name: "SA.16 - Display {{ redirfile }} content"
          debug:
            msg: |-
              "aeven_redirout {{ file_content_redirout.stdout }}"      

        - name: "SA.17 - List {{ tmpdir }} at the end"
          run_once: true
          win_shell: Get-ChildItem -Path {{ tmpdir }}
          register: dir_of_tmpdir_end

        - name: "SA.18 - list dir of {{ tmpdir }} at the end"
          debug:
            var: dir_of_tmpdir_end.stdout_lines 

      always:
        - name: "SA.19 - Delete temp {{ tmpdir }} agent directory"
          win_file:
            path: "{{ tmpdir }}"
            state: absent
            