- name: Create OS groups
  hosts: '{{ hostlist }}'
  become: false
  gather_facts: false
  connection: local
  tasks:
    - name: Create OS group
      group_by:
        key: 'machine_{{ ostype }}'
      changed_when: false
      when: ostype is defined
      delegate_to: localhost

- name: Socks tunnel setup
  hosts: 'machine_windows'
  gather_facts: false
  tasks:
    - include_role:
        name: ansible-role-event-socks-tunnel
        apply:
          check_mode: false
          run_once: true
          delegate_to: localhost
      vars:
        acc_id: '{{ blueid_shortcode }}'
        transaction_id: '{{ tower_job_id }}'
        trans_num: '{{ tower_job_id }}'

    - set_fact:
        ansible_become_method: runas
        ansible_become_user: system

# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
# now working on {{ hostlist }} host
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
#
# Installation playbook of Opsware agent on windows
#
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
# aeven_fstdout    stdout_file: "tool_aeven_servercheck_ITM_[date And Time]_staradc3001_stdout"   # created by frwk_toolsview.py NOT IN PLAYBOOK
# aeven_saagout    saagtfile: "sa-agent_install.log"   # the one created by bat file
# aeven_rediout    redirfile: "sa-agent_rdiout.log"   # the redirect
# aeven_uninout    uninsfile: "sa-agent_uninstall_stdout.log"  the one created by bat file (uninstall)
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: 'Installation playbook of SA Opsware agent for Aeven on server {{ hostlist }}'
  hosts: '{{ hostlist }}'
  become: true
  gather_facts: false
  vars:
    tmpdir: 'C:/Windows/Temp/opsware-agent-windows/'
    sagentdir: 'C:/PROGRA~1/Opsware/agent/pylibs3/cog/uninstall/'
    saagtfile: 'sa-agent_install.log' # the one created by bat file
    redirfile: 'sa-agent_rdiout.log' # the redirect
    uninsfile: 'sa-agent_uninstall_stdout.log' # the one created by bat file (uninstall)
  tasks:
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    # check if uninstall file exists
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    - name: 'SA.01.01 - check if agent_uninstall exists'
      win_shell: '[bool](Test-Path "{{ sagentdir }}agent_uninstall.bat")'
      ignore_errors: yes
      register: win_uninstall_exists

    - name: 'SA.01.02 - set_fact uninstall_exists if file exists'
      set_fact:
        uninstall_exists: "{{ 'True' in win_uninstall_exists.stdout }}"

    - name: UNINSTALL block (conditional if uninstall exists)
      block:
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        # run UNINSTALL
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: 'SA.02.01 - kill any process running'
          ignore_errors: yes
          win_shell: "Get-WmiObject Win32_Process -filter { commandLine LIKE '%Opsware%' AND NOT commandLine LIKE '%Get-WmiObject%' } | ForEach-Object { $_.Terminate() }"
          register: stop_watchdog

        - name: 'SA.02.02 - stop agent service'
          ignore_errors: yes
          # win_shell: "Get-Service -Name OpswareAgent | Stop-Service -Force -PassThru | Set-Service -StartupType disabled"
          win_shell: 'Get-Service -Name OpswareAgent | Stop-Service -Force -PassThru'
          register: stop_service

        - name: 'SA.02.03 - Run uninstall command'
          win_command: '{{ sagentdir }}agent_uninstall.bat --force 2>&1'
          args:
            chdir: '{{ sagentdir }}'
          register: script_run

        - name: 'SA.02.04 - Delete C:/PROGRA~1/Opsware/ agent directory'
          ignore_errors: yes
          win_shell: 'Remove-Item -Path "C:/PROGRA~1/Opsware/" -Recurse -Force'
          register: delete_service

        - name: 'SA.02.05 - List dir after uninstall'
          ignore_errors: yes
          win_shell: 'Get-ChildItem -Path "C:/PROGRA~1/"'
          register: dir_at_end

        - name: 'SA.02.06 - print dir'
          debug:
            var: dir_at_end.stdout_lines

      when: uninstall_exists

      always:
        - name: 'SA.02.08 - Display result from uninstall'
          debug:
            msg: 'aeven_uninout ==>|{{ script_run.stdout }}'
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    # INSTALL block
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    - name: INSTALL block
      block:
        - name: 'SA.03.01 - Get PATH for machine'
          run_once: true
          raw: $ENV:PATH
          register: path_out

        - name: 'SA.03.02 - Output result'
          debug:
            var: path_out.stdout_lines

        - name: 'SA.03.03 - Delete {{ tmpdir }} directory on {{ hostlist }}'
          win_file:
            path: '{{ tmpdir }}'
            state: absent

        - name: 'SA.03.04 - Create {{ tmpdir }} directory on {{ hostlist }}'
          win_file:
            path: '{{ tmpdir }}'
            state: directory

        - name: 'SA.03.05 - copy multiple items'
          win_copy:
            src: '{{ item.src }}'
            dest: '{{ item.dest }}'

          loop:
            - src: scripts/
              dest: '{{ tmpdir }}'

            - src: opsware-agent-windows/
              dest: '{{ tmpdir }}'

        - name: 'SA.03.06 - List {{ tmpdir }} BEFORE'
          win_shell: 'Get-ChildItem -Path {{ tmpdir }}'
          register: dir_of_tmpdir_before

        - name: 'SA.03.08 - list dir of {{ tmpdir }} at the BEFORE'
          debug:
            var: dir_of_tmpdir_before.stdout_lines
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        # run installer
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: 'Run sa_agent_install.bat'
          win_command: '{{ tmpdir }}sa_agent_install.bat > {{ tmpdir }}{{ redirfile }} 2>&1'
          args:
            chdir: '{{ tmpdir }}'
          register: script_run

        - name: 'SA.03.10 - Output list'
          debug:
            var: script_run.stdout_lines

        - name: 'SA.03.11 - List {{ tmpdir }} AFTER'
          ignore_errors: yes
          win_shell: 'Get-ChildItem -Path {{ tmpdir }}'
          register: dir_of_tmpdir_after

        - name: 'SA.03.12 - list dir of {{ tmpdir }} at the AFTER'
          debug:
            var: dir_of_tmpdir_after.stdout_lines

        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        # aeven_saagout    saagtfile: "sa-agent_install.log"   # the one created by bat file
        # aeven_rediout    redirfile: "sa-agent_rdiout.log"   # the redirect
        # aeven_uninout    uninsfile: "sa-agent_uninstall_stdout.log"  the one created by bat file (uninstall)
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------

        - name: 'SA.03.13 - Read content from {{ redirfile }}' # the redirect
          ignore_errors: yes
          win_shell: Get-Content -LiteralPath "{{ tmpdir }}{{ redirfile }}"
          register: file_content_redirout

        - name: 'SA.03.14 - Display {{ redirfile }} content'
          debug:
            msg: 'aeven_rediout ==>|{{ file_content_redirout.stdout }}'

        - name: 'SA.03.15 - Read content from {{ saagtfile }}' # the one created by bat file
          ignore_errors: yes
          win_shell: Get-Content -LiteralPath "{{ tmpdir }}{{ saagtfile }}"
          register: file_content_saagtfile

        - name: 'SA.03.16 - Display {{ saagtfile }} content'
          debug:
            msg: 'aeven_saagout ==>|{{ file_content_saagtfile.stdout }}'

        - name: 'SA.03.17 - List dir to find mid file'
          ignore_errors: yes
          win_shell: 'Get-ChildItem -Path "C:/PROGRA~1/COMMON~1/Opsware/etc/agent/"'
          register: dir_of_tmpdir_after

        - name: 'SA.03.18 - list dir of {{ tmpdir }} at the AFTER'
          debug:
            var: dir_of_tmpdir_after.stdout_lines

        - name: 'SA.03.19 - start agent service'
          ignore_errors: yes
          win_shell: 'Get-Service -Name OpswareAgent | Stop-Service -Force -PassThru | Start-Service'
          register: stop_service

        - name: 'SA.03.19 - check if mid file exists'
          win_shell: '[bool](Test-Path "C:/PROGRA~1/COMMON~1/Opsware/etc/agent/mid")'
          ignore_errors: yes
          register: win_check_mid

        - name: 'SA.03.20 - win_check_mid'
          set_fact:
            mid_file_exists: "{{ 'True' in win_check_mid.stdout }}"

        - name: 'SA.03.21 - Display True/False check'
          debug:
            msg: 'mid_file_exists {{ win_check_mid.stdout }}'

      always:
        - name: 'SA.03.22 - Delete {{ tmpdir }} directory'
          win_file:
            path: '{{ tmpdir }}'
            state: absent

        # - name: "SA.03.23 - Delete {{ tmpdir }} directory"
        #   ignore_errors: yes
        #   win_shell: 'Remove-Item -Path "{{ tmpdir }}" -Recurse -Force'
        #   register: delete_work
