- name: Create OS groups
  hosts: "{{ hostlist }}"
  become: false
  gather_facts: false
  connection: local
  tasks:
    - name: Create OS group
      group_by:
        key: "machine_{{ ostype }}"
      changed_when: false
      when: ostype is defined
      delegate_to: localhost

- name: Socks tunnel setup
  hosts: 'machine_windows'
  gather_facts: false
  tasks:
    - include_role:
        name: ansible-role-event-socks-tunnel
        apply:
          check_mode: false
          run_once: true
          delegate_to: localhost
      vars:
        acc_id: "{{ blueid_shortcode }}"
        transaction_id: "{{ tower_job_id }}"
        trans_num: "{{ tower_job_id }}"

    - set_fact:
        ansible_become_method: runas
        ansible_become_user: system
        
- name: Get script result on windows nodes
  hosts:  "{{ hostlist }}"
  become: true
  run_once: true
  ignore_errors: yes      
  gather_facts: false
  vars:
      tmpdir: "C:/Windows/Temp/persistent_check/"
      cmdexec: "serverConfigScanner.ps1"  
      stdoutfile: "serverConfigScanner.log"
      foutcsv: "serverConfigScanner.csv"
      foutjsn: "serverConfigScanner.json"
      foutxml: "serverConfigScanner.xml"
  tasks:
    - name: run check_for_persistent_route
      # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
      # run check_for_persistent_route
      # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
      block:
        - name: copy scripts
          win_copy: 
            src: scripts/
            dest: "{{ tmpdir }}"

        - name: Run powershell
          win_shell: "{{ tmpdir }}{{ cmdexec }} > {{ tmpdir }}{{ stdoutfile }} 2>&1"
          args:
            chdir: "{{ tmpdir }}"
          register: script_run_persistent

        - name: "Read content from stdoutfile"
          run_once: true
          win_shell: "Get-Content -LiteralPath {{ tmpdir }}{{ stdoutfile }}"
          register: file_content_stdout
        - name: "Display content in stdout"
          debug:
            msg: |-
              "aeven_stdout_log {{ file_content_stdout.stdout }}"

        - name: "Read content from foutcsv"
          run_once: true
          win_shell: "Get-Content -LiteralPath {{ tmpdir }}{{ foutcsv }}"
          register: file_content_stdout
        - name: "Display content in stdout"
          debug:
            msg: |-
              "aeven_foutcsv {{ file_content_stdout.foutcsv }}"