- name: Create OS groups
  hosts: "{{ hostlist }}"
  become: false
  gather_facts: false
  connection: local
  tasks:
    - name: Create OS group
      group_by:
        key: "machine_{{ ostype }}"
      changed_when: false
      when: ostype is defined
      delegate_to: localhost

- name: Socks tunnel setup
  hosts: 'machine_windows'
  gather_facts: false
  tasks:
    - include_role:
        name: ansible-role-event-socks-tunnel
        apply:
          check_mode: false
          run_once: true
          delegate_to: localhost
      vars:
        acc_id: "{{ blueid_shortcode }}"
        transaction_id: "{{ tower_job_id }}"
        trans_num: "{{ tower_job_id }}"

    - set_fact:
        ansible_become_method: runas
        ansible_become_user: system
        
- name: Get script result on windows nodes
  hosts: 'machine_windows'
  become: true
  gather_facts: false
  vars:
      tmpdir: "C:/Windows/Temp/persistent_check/"
      stdoutfile: "check_for_persistent_stdout.log"  
  tasks:
    - name: "List {{ tmpdir }} at the end"
      run_once: true
      win_shell: Get-ChildItem -Path {{ tmpdir }}
      register: dir_of_tmpdir_end
      ignore_errors: yes      
    - name: "list dir of {{ tmpdir }} at the end"
      ignore_errors: yes      
      debug:
        var: dir_of_tmpdir_end.stdout_lines

    - name: Delete scripttemp_dir directory
      win_file:
        path: "{{ tmpdir }}"
        state: absent
      ignore_errors: yes      

    - name: copy multiple items
      win_copy: 
        src: "{{ item.src }}" 
        dest: "{{ item.dest }}"

      loop:
        - src: scripts/
          dest: "{{ tmpdir }}"

    - name: Run powershell
      win_shell: "{{ tmpdir }}check_for_persistent_route.ps1 > {{ tmpdir }}{{ stdoutfile }} 2>&1"
      args:
        chdir: "{{ tmpdir }}"
      register: script_run_persistent

    - name: Output list
      debug:
        var: script_run_persistent.stdout_lines
        
    - name: "Read content from {{ stdoutfile }}"
      run_once: true
      win_shell: Get-Content -LiteralPath "{{ tmpdir }}{{ stdoutfile }}"
      register: file_content_stdout

    - name: "Display content in stdout"
      debug:
        msg: |-
          "sa_agent_stdout_log {{ file_content_stdout.stdout }}"      

    - name: Delete scripttemp_dir directory
      win_file:
        path: "{{ tmpdir }}"
        state: absent
      ignore_errors: yes
      
# - name: Run powershell remove-item
#   win_shell: "Remove-Item -Path '{{ tmpdir }}' -Recurse -Force -ErrorAction SilentlyContinue"
#   args:
#     chdir: "C:/Windows/Temp/"
#   register: script_run_remove

# - name: "Display content in script_run_remove"
#   debug:
#     msg: |-
#       "sa_agent_stdout_log {{ script_run_remove.stdout }}"      
