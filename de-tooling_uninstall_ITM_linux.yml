---
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
#step: begin and setup tunnel and credentials
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: '1.A - Create OS groups'
  hosts: '{{ nodename }}'
  become: false
  gather_facts: false
  connection: local
  tasks:
    - name: '1.A.00 - Create OS machine_{{ ostype }}'
      group_by:
        key: 'machine_{{ ostype }}'
      changed_when: false
      when: ostype is defined
      delegate_to: localhost

- name: '2.B - Socks tunnel setup'
  hosts: '{{ nodename }}'
  gather_facts: false
  tasks:
    - include_role: # Not numbered per rules
        name: ansible-role-event-socks-tunnel
        apply:
          check_mode: false
          run_once: true
          delegate_to: localhost
      vars:
        acc_id: '{{ blueid_shortcode }}'
        transaction_id: '{{ tower_job_id }}'
        trans_num: '{{ tower_job_id }}'

    - name: '2.B.00 - Set become user'
      set_fact:
        ansible_become_user: root

# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
#step:  uninstall ITM on linux, and then cleanup
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: '3.C - uninstall ITM on linux, and then cleanup'
  hosts: '{{ nodename }}'
  become: true
  gather_facts: false
  tasks:
    - name: '3.C.00 - Copy, create, fetch file block'
      block:
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        #step:  check if /opt/IBM/ITM/ exists
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: '3.C.01 - Check if the /opt/IBM/ITM/ exists'
          ignore_errors: yes
          stat:
            path: '/opt/IBM/ITM/'
          register: file_stat_ITM
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        #step:  Copy, create, fetch file
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: '3.C.02 - Create prtemp_dir directory'
          ignore_errors: yes
          file:
            path: /tmp/scripttemp_dir
            state: directory
            mode: 0777
          when: file_stat_ITM.stat.exists

        - name: '3.C.03 - copy multiple items'
          ignore_errors: yes
          copy:
            src: '{{ item.src }}'
            dest: '{{ item.dest }}'
            mode: 0777

          loop:
            - src: scripts/ITMAgentUNinstall_linux.pl
              dest: /tmp/scripttemp_dir/ITMAgentUNinstall_linux.pl
          when: file_stat_ITM.stat.exists
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        #step:  run uninstall
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: '3.C.04 - Run command'
          ignore_errors: yes
          shell: perl -w ITMAgentUNinstall_linux.pl
          args:
            chdir: /tmp/scripttemp_dir
          register: script_run
          # when: file_stat_ITM.stat.exists

        - name: '3.C.05 - Output list'
          ignore_errors: yes
          debug:
            var: script_run.stdout_lines
          when: file_stat_ITM.stat.exists
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        #step:  Delete ITM files
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: '3.C.06 - Delete /opt/IBM/ITM/ directory'
          ignore_errors: yes
          file:
            path: /opt/IBM/ITM/
            state: absent
          when: file_stat_ITM.stat.exists

        - name: '3.C.07 - List /opt/IBM/ITM/'
          ignore_errors: yes
          shell: 'ls -lrta /opt/IBM/ITM/'
          register: list_agentdir_out

        - name: '3.C.08 - send output to ansible'
          ignore_errors: yes
          debug:
            var: list_agentdir_out.stdout_lines
          when: file_stat_ITM.stat.exists

        - name: '3.C.09 - Delete scripttemp_dir directory'
          ignore_errors: yes
          file:
            path: /tmp/scripttemp_dir
            state: absent

        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        #step:  remove itmuser
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: '3.C.10 - Check if itmuser exists'
          ignore_errors: yes
          shell: 'grep -i "^itmuser:" /etc/passwd'
          register: unix_user_info
          changed_when: false

        - name: '3.C.11 - send output to ansible'
          ignore_errors: yes
          debug:
            var: unix_user_info.stdout_lines
          when:
            - unix_user_info.rc == 0
            - unix_user_info.stdout is match("itmuser")

        - name: '3.C.12 - Delete user itmuser'
          ignore_errors: true
          user:
            name: 'itmuser'
            remove: '{{ data.remove_user_dirs | default(true) }}'
            state: absent
          when:
            - unix_user_info.rc == 0
            - unix_user_info.stdout is match("itmuser")

            - name: '3.C.12a - Parse process ID when user deletion fails'
              set_fact:
                process_id: "{{ unix_user_info.stderr | regex_search('process ([0-9]+)', '\\1') | first | default('') }}"
              when:
                - unix_user_info.rc == 0
                - unix_user_info.stdout is match("itmuser")
                - unix_user_info.stderr is defined and unix_user_info.stderr is search("user itmuser is currently used by process")

            - name: '3.C.12b - Show process information that is locking the user'
              shell: "ps -p {{ process_id }} -o pid,ppid,user,cmd,etime"
              register: process_info
              ignore_errors: yes
              when: process_id is defined and process_id != ''

            - name: '3.C.12c - Display process information'
              debug:
                var: process_info.stdout_lines
              when: process_id is defined and process_id != ''

            - name: '3.C.12d - Get all processes running as itmuser'
              shell: "ps -u itmuser -o pid,ppid,user,cmd,etime"
              register: itmuser_processes
              ignore_errors: yes
              when:
                - unix_user_info.rc == 0
                - unix_user_info.stdout is match("itmuser")

            - name: '3.C.12e - Display all itmuser processes'
              debug:
                var: itmuser_processes.stdout_lines
              when: itmuser_processes is defined

        - name: '3.C.13 - list /etc/sudoers.d/'
          ignore_errors: yes
          shell: 'ls -lrta /etc/sudoers.d/'
          register: list_agentdir_out
          when:
            - unix_user_info.rc == 0
            - unix_user_info.stdout is match("itmuser")

        # - name: '3.C.14 - Delete sudoers profile for itmuser'
        #   ignore_errors: true
        #   ansible.builtin.file:
        #     path: "/etc/sudoers.d/itmuser_sudo"
        #     state: absent
        #   when:
        #     - unix_user_info.rc == 0
        #     - unix_user_info.stdout is match("itmuser")

        # - name: '3.C.15 - Additional task example'
        #   ignore_errors: yes
        #   debug:
        #     msg: "This is a placeholder for the next task."