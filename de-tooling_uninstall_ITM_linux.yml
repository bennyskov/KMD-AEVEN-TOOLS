---
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
#step: begin and setup tunnel and credentials
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: '1.A - Create OS groups'
  hosts: '{{ nodename }}'
  become: false
  gather_facts: false
  connection: local
  tasks:
    - name: '1.A.00 - Create OS machine_{{ ostype }}'
      group_by:
        key: 'machine_{{ ostype }}'
      changed_when: false
      when: ostype is defined
      delegate_to: localhost
- name: '2.B - Socks tunnel setup'
  hosts: '{{ nodename }}'
  gather_facts: false
  tasks:
    - include_role: # Not numbered per rules
        name: ansible-role-event-socks-tunnel
        apply:
          check_mode: false
          run_once: true
          delegate_to: localhost
      vars:
        acc_id: '{{ blueid_shortcode }}'
        transaction_id: '{{ tower_job_id }}'
        trans_num: '{{ tower_job_id }}'

    - name: '2.B.00 - Set become user'
      set_fact:
        ansible_become_user: root
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
#step:  uninstall ITM on linux, and then cleanup
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: '3.C - uninstall ITM on linux, and then cleanup'
  hosts: '{{ nodename }}'
  become: true
  gather_facts: false
  tasks:
    - name: '3.C.00 - Copy, create, fetch file block'
      block:
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        #step:  check if /opt/IBM/ITM/ exists
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: '3.C.01 - Check if the /opt/IBM/ITM/ exists'
          ignore_errors: yes
          stat:
            path: /opt/IBM/ITM/
          register: file_stat_ITM

        - name: '3.C.02 - set /opt/IBM/'
          ignore_errors: yes
          file:
            path: /opt/IBM
            mode: 0775
            owner: root
            group: root
            recurse: true
          when: file_stat_ITM.stat.exists

        - name: '3.C.03 - Create scripttemp_dir directory'
          ignore_errors: yes
          file:
            path: /tmp/scripttemp_dir
            state: directory
            mode: 0775
          when: file_stat_ITM.stat.exists

        - name: '3.C.04 - copy multiple items'
          ignore_errors: yes
          copy:
            src: '{{ item.src }}'
            dest: '{{ item.dest }}'
            mode: 0775

          loop:
            - src: scripts/ITMAgentUNinstall_linux.pl
              dest: /tmp/scripttemp_dir/ITMAgentUNinstall_linux.pl
          when: file_stat_ITM.stat.exists
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        #step:  run uninstall
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: '3.C.05 - Run command'
          ignore_errors: yes
          shell: perl -w ITMAgentUNinstall_linux.pl
          args:
            chdir: /tmp/scripttemp_dir
          register: script_run
          # when: file_stat_ITM.stat.exists

        - name: '3.C.06 - Output list'
          ignore_errors: yes
          debug:
            var: script_run.stdout_lines
          when: file_stat_ITM.stat.exists
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        #step:  Delete ITM files
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: '3.C.07 - test if /opt/IBM is a mountpoint using shell command'
          ignore_errors: yes
          shell: "findmnt -n /opt/IBM > /dev/null 2>&1 && echo 'is_mount' || echo 'not_mount'"
          register: file_mountpoint_ITM
          when: file_stat_ITM.stat.exists

        - name: '3.C.07a - Display mountpoint status'
          debug:
            msg: "Path /opt/IBM is a mountpoint: {{ 'is_mount' in file_mountpoint_ITM.stdout }}"
          when: file_stat_ITM.stat.exists and file_mountpoint_ITM.stdout is defined

        - name: '3.C.08 - Delete /opt/IBM/ITM'
          ignore_errors: yes
          file:
            path: /opt/IBM/ITM
            state: absent
            mode: 0775
            owner: root
            group: root
            force: true
          register: delete_dir_result
          when:
            - file_stat_ITM.stat.exists
            - not ('is_mount' in file_mountpoint_ITM.stdout | default(''))

        - name: '3.C.08a - Check what is locking /opt/IBM/ITM/ directory'
          shell: "lsof +D /opt/IBM/ITM/"
          register: locking_processes
          ignore_errors: yes
          when:
            - delete_dir_result is defined
            - delete_dir_result.failed
            - file_stat_ITM.stat.exists
            - not ('is_mount' in file_mountpoint_ITM.stdout | default(''))

        - name: '3.C.08b - Display locking processes for /opt/IBM/ITM/'
          debug:
            msg: >-
              "No locking processes found for /opt/IBM/ITM/" if locking_processes.stdout_lines | length == 0 else locking_processes.stdout_lines
          when:
            - locking_processes is defined

        - name: '3.C.08c - List /opt/IBM/ITM/'
          ignore_errors: yes
          shell: 'ls -lrta /opt/IBM/ITM/'
          register: list_agentdir_out

        - name: '3.C.09 - Find ITM case'
          shell: 'find / -name "ITM" 2>/dev/null'
          register: find_result_ITM
          changed_when: false
          failed_when: false

        - name: '3.C.09a - Check if ITM was found'
          debug:
            msg: "ITM found"
          when: find_result_ITM.stdout | trim != ""

        - name: '3.C.08d - send output to ansible'
          ignore_errors: yes
          debug:
            var: list_agentdir_out.stdout_lines
          when: file_stat_ITM.stat.exists

        - name: '3.C.09 - Delete scripttemp_dir directory'
          ignore_errors: yes
          file:
            path: /tmp/scripttemp_dir
            state: absent

        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        #step:  remove itmuser
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: '3.C.10 - Check if itmuser exists'
          ignore_errors: yes
          shell: 'id itmuser'
          register: unix_user_info
          changed_when: false
          failed_when: false

        - name: '3.C.11 - Comprehensive cleanup for itmuser'
          when: unix_user_info.rc == 0
          block:
            - name: '3.C.11a - Kill all processes owned by itmuser'
              shell: "pkill -9 -u itmuser || true"
              ignore_errors: true

            - name: '3.C.11b - Remove mail spool for itmuser'
              file:
                path: "/var/mail/itmuser"
                state: absent
              ignore_errors: true

            - name: '3.C.11c - Remove temp files for itmuser'
              shell: "find /tmp -user itmuser -exec rm -rf {} \\; 2>/dev/null || true"
              ignore_errors: true

            - name: '3.C.11d - Remove cron jobs for itmuser'
              file:
                path: "/var/spool/cron/itmuser"
                state: absent
              ignore_errors: true

            - name: '3.C.11e - Remove print jobs for itmuser'
              shell: "find /var/spool/cups -user itmuser -exec rm -rf {} \\; 2>/dev/null || true"
              ignore_errors: true

            - name: '3.C.11f - Delete user itmuser'
              user:
                name: 'itmuser'
                remove: '{{ data.remove_user_dirs | default(true) }}'
                state: absent
              ignore_errors: true
              register: delete_user_result

            - name: '3.C.11g - Delete sudoers profile for itmuser'
              file:
                path: '/etc/sudoers.d/itmuser_sudo'
                state: absent
              ignore_errors: true

            - name: '3.C.11h - Delete home directory for itmuser if it still exists'
              file:
                path: '/home/itmuser'
                state: absent
                force: true
              ignore_errors: true

            - name: '3.C.11i - Remove any other sudoers files for itmuser'
              shell: "find /etc/sudoers.d/ -name '*itmuser*' -exec rm -f {} \\; 2>/dev/null || true"
              ignore_errors: true

            - name: '3.C.11j - Check for remaining files owned by itmuser'
              shell: "find / -user itmuser -ls 2>/dev/null || true"
              register: remaining_files
              ignore_errors: true
              changed_when: false

            - name: '3.C.11k - Display any remaining files'
              debug:
                msg: "Remaining files for itmuser: {{ remaining_files.stdout_lines }}"
              when: remaining_files.stdout_lines | length > 0

            # Process troubleshooting tasks (in case delete_user_result fails)
            - name: '3.C.12a - Parse process ID when user deletion fails'
              set_fact:
                process_id: "{{ (delete_user_result.msg | regex_findall('process ([0-9]+)')) | first | default('') }}"
              when:
                - delete_user_result is defined
                - delete_user_result.failed
                - delete_user_result.msg is defined
                - delete_user_result.msg is search("user itmuser is currently used by process")

            - name: '3.C.12b - Show process information that is locking the user'
              shell: "ps -p {{ process_id }} -o pid,ppid,user,cmd,etime"
              register: process_info
              ignore_errors: yes
              when: process_id is defined and process_id != ''

            - name: '3.C.12c - Verify locking process command contains ITM path'
              set_fact:
                locking_process_is_itm: "{{ process_info.stdout is defined and '/opt/IBM/ITM/' in process_info.stdout }}"
              when: process_id is defined and process_id != '' and process_info is defined

            - name: '3.C.12d - Display verification result'
              debug:
                msg: "Locking process {{ process_id }} command contains '/opt/IBM/ITM/': {{ locking_process_is_itm }}"
              when: process_id is defined and process_id != '' and locking_process_is_itm is defined

            - name: '3.C.12e - Display process information'
              debug:
                var: process_info.stdout_lines
              when: process_id is defined and process_id != ''

            - name: '3.C.12f - Get all processes running as itmuser'
              shell: "ps -u itmuser -o pid,ppid,user,cmd,etime"
              register: itmuser_processes
              ignore_errors: yes
              when:
                - delete_user_result is defined
                - delete_user_result.failed
                - delete_user_result.msg is defined
                - delete_user_result.msg is search("user itmuser is currently used by process")

            - name: '3.C.12h - Display all itmuser processes'
              debug:
                var: itmuser_processes.stdout_lines
              when:
                - delete_user_result is defined
                - delete_user_result.failed
                - delete_user_result.msg is defined
                - delete_user_result.msg is search("user itmuser is currently used by process")
                - itmuser_processes is defined

            - name: '3.C.12i - Kill locking process (if found)'
              shell: "kill -9 {{ process_id }}"
              register: kill_process_result
              ignore_errors: yes
              when:
                - process_id is defined
                - process_id != ''

            - name: '3.C.12j - Retry delete user itmuser after killing process'
              user:
                name: 'itmuser'
                remove: '{{ data.remove_user_dirs | default(true) }}'
                state: absent
              register: retry_delete_user_result
              ignore_errors: true
              when:
                - process_id is defined
                - process_id != ''

            - name: '3.C.12k - Show result of retry delete user'
              debug:
                var: retry_delete_user_result
              when:
                - retry_delete_user_result is defined
