# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
#step: begin and setup tunnel and credentials
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: '1.A - Create OS groups'
  hosts: '{{ nodename }}'
  become: false
  gather_facts: false
  connection: local
  tasks:
    - name: '1.A.00 - Create OS machine_{{ ostype }}'
      group_by:
        key: 'machine_{{ ostype }}'
      changed_when: false
      when: ostype is defined
      delegate_to: localhost
- name: '2.B - Socks tunnel setup'
  hosts: '{{ nodename }}'
  gather_facts: false
  tasks:
    - include_role: # Not numbered per rules
        name: ansible-role-event-socks-tunnel
        apply:
          check_mode: false
          run_once: true
          delegate_to: localhost
      vars:
        acc_id: '{{ blueid_shortcode }}'
        transaction_id: '{{ tower_job_id }}'
        trans_num: '{{ tower_job_id }}'

    - name: '2.B.00 - Set become user'
      set_fact:
        ansible_become_user: root
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
#step working on LOCALHOST
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: gather_facts LOCALHOST
  hosts: localhost
  become: true
  gather_facts: true
  connection: local
  vars:
    tower_host: 'https://ansible-tower-web-svc-tower.apps.kmdcacf001.adminkmd.local'
    tower_username: 'functional_id_001'
    tower_password: 'm9AHKuXYa*MeZZWLsHqB'
  tasks:
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    #step Export host from inventory
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    - name: 'Export host from inventory'
      block:
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        #step debug facts and list local directories for ansible localhost
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: Debug facts
          debug:
            msg: |-
              '{{ ansible_facts }}'
          tags:
            - debug_facts

        - name: 'List homedir files'
          shell: 'ls -lrt'
          register: script_homedir
        - name: Output list homedir
          debug:
            var: script_homedir.stdout_lines

        - name: 'List /tmp/'
          shell: 'ls -lrt /tmp/'
          register: script_tmp
        - name: Output list tmp
          debug:
            var: script_tmp.stdout_lines
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        #step list host from inventory
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: Create tower-cli config
          include_role:
            name: towercli-init

        - name: Get host information using AWX command
          shell: 'awx-cli host list --name={{ nodename }} -f yaml'
          register: host_response
          delegate_to: localhost
          failed_when: false
          changed_when: false

        - name: Set host data from command output
          set_fact:
            host_data: '{{ host_response.stdout | from_yaml }}'
          when: host_response.rc == 0

        - name: List inventories for the host
          debug:
            msg: 'Host {{ nodename }} found in inventory: {{ item.inventory_name }}'
          loop: '{{ host_data.results }}'
          when: host_data is defined and host_data.results | length > 0
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
#
#step we are now running from remote host
#
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------
- name: 'Export of on host from ansible itower inventory and then remove the host from all inventories'
  hosts: '{{ nodename }}'
  gather_facts: false
  become: false
  run_once: true
  ignore_errors: yes
  vars:
    nodename: '{{ nodename }}'
    ansib_user1: 'kmduxat1'
    ansib_user2: 'kmduxat2'
  tasks:
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    #step Export host from inventory
    # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
    - name: 'cleanup ansible files on host { nodename }}'
      block:
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        #
        #step cleanup ansible
        #
        # '/var/opt/ansible/GTS',
        # '/var/opt/ansible/tmp',
        # '/var/opt/ansible/GTS/dataLake'
        #
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: Delete ansible directory
          file:
            path: /var/opt/ansible
            state: absent

        - name: 'List /var/opt/ansible'
          shell: 'ls -lrta /var/opt/ansible'
          register: list_agentdir_out

        - name: 'send output to ansible'
          debug:
            var: list_agentdir_out.stdout_lines
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        #step remove ansible users ansib_user1
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: 'Check if {{ ansib_user1 }} already exists'
          command: 'id {{ ansib_user1 }}'
          register: unix_user_info

        - name: 'Delete user {{ ansib_user1 }}'
          ignore_errors: true
          user:
            name: '{{ ansib_user1 }}'
            remove: '{{ data.remove_user_dirs | default(true) }}'
            state: absent

        - name: ' Delete sudoers profile for {{ ansib_user1 }}'
          file:
            path: '/etc/sudoers.d/{{ ansib_user1 }}_sudo'
            state: absent
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        #step remove ansible users ansib_user2
        # -----------------------------------------------------------------------------------------------------------------------------------------------------------------
        - name: 'Check if {{ ansib_user2 }} already exists'
          command: 'id {{ ansib_user2 }}'
          register: unix_user_info

        - name: 'Delete user {{ ansib_user2 }}'
          user:
            name: '{{ ansib_user2 }}'
            remove: '{{ data.remove_user_dirs | default(true) }}'
            state: absent

        - name: ' Delete sudoers profile for {{ ansib_user2 }}'
          file:
            path: '/etc/sudoers.d/{{ ansib_user2 }}_sudo'
            state: absent